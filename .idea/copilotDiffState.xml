<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/GameActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/GameActivity.java" />
              <option name="originalContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android:widget.Toast;&#10;&#10;import androidx.activity.OnBackPressedCallback;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.tabletussle.database.AppDatabase;&#10;import com.example.tabletussle.database.GameStatsManager;&#10;import com.example.tabletussle.database.User;&#10;import com.example.tabletussle.database.UserDao;&#10;import com.example.tabletussle.database.UserSession;&#10;import com.google.android.material.button.MaterialButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Random;&#10;&#10;public class GameActivity extends AppCompatActivity {&#10;&#10;    private TextView tvPlayer1Name, tvPlayer2Name;&#10;    private TextView tvPlayer1Score, tvPlayer2Score;&#10;    private TextView tvCurrentTurn;&#10;    private ImageButton btnMenu, btnInfo;&#10;&#10;    // Game board cells&#10;    private MaterialButton[][] cells = new MaterialButton[3][3];&#10;&#10;    // Game state&#10;    private String[][] board = new String[3][3]; // &quot;X&quot;, &quot;O&quot;, or null&#10;    private static final String PLAYER_X = &quot;X&quot;; // Human player&#10;    private static final String PLAYER_O = &quot;O&quot;; // AI player&#10;    private String currentPlayer = PLAYER_X;&#10;    private boolean gameActive = true;&#10;    private int movesCount = 0;&#10;&#10;    private UserSession userSession;&#10;    private AppDatabase database;&#10;    private UserDao userDao;&#10;    private GameStatsManager statsManager;&#10;&#10;    private String gameMode; // &quot;single&quot;, &quot;quick&quot;, &quot;room&quot;&#10;    private String roomCode;&#10;    private int player1Score = 0;&#10;    private int player2Score = 0;&#10;&#10;    private Handler handler = new Handler(Looper.getMainLooper());&#10;    private Random random = new Random();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_game);&#10;&#10;        // Initialize database and session&#10;        database = AppDatabase.getInstance(this);&#10;        userDao = database.userDao();&#10;        userSession = new UserSession(this);&#10;        statsManager = new GameStatsManager(this);&#10;&#10;        // Get game mode from intent&#10;        Intent intent = getIntent();&#10;        gameMode = intent.getStringExtra(&quot;GAME_MODE&quot;);&#10;        if (gameMode == null) {&#10;            gameMode = &quot;single&quot;; // Default to single player&#10;        }&#10;        roomCode = intent.getStringExtra(&quot;ROOM_CODE&quot;);&#10;&#10;        initializeViews();&#10;        initializeBoard();&#10;        loadPlayerInfo();&#10;        setupClickListeners();&#10;&#10;        // Handle back button press&#10;        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {&#10;            @Override&#10;            public void handleOnBackPressed() {&#10;                showQuitConfirmation();&#10;            }&#10;        });&#10;        setupBoardClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvPlayer1Name = findViewById(R.id.tvPlayer1Name);&#10;        tvPlayer2Name = findViewById(R.id.tvPlayer2Name);&#10;        tvPlayer1Score = findViewById(R.id.tvPlayer1Score);&#10;        tvPlayer2Score = findViewById(R.id.tvPlayer2Score);&#10;        tvCurrentTurn = findViewById(R.id.tvCurrentTurn);&#10;        btnMenu = findViewById(R.id.btnMenu);&#10;        btnInfo = findViewById(R.id.btnInfo);&#10;&#10;        // Initialize cell buttons&#10;        cells[0][0] = findViewById(R.id.cell_0_0);&#10;        cells[0][1] = findViewById(R.id.cell_0_1);&#10;        cells[0][2] = findViewById(R.id.cell_0_2);&#10;        cells[1][0] = findViewById(R.id.cell_1_0);&#10;        cells[1][1] = findViewById(R.id.cell_1_1);&#10;        cells[1][2] = findViewById(R.id.cell_1_2);&#10;        cells[2][0] = findViewById(R.id.cell_2_0);&#10;        cells[2][1] = findViewById(R.id.cell_2_1);&#10;        cells[2][2] = findViewById(R.id.cell_2_2);&#10;    }&#10;&#10;    private void initializeBoard() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                board[i][j] = null;&#10;                cells[i][j].setText(&quot;&quot;);&#10;                cells[i][j].setEnabled(true);&#10;            }&#10;        }&#10;        currentPlayer = PLAYER_X;&#10;        gameActive = true;&#10;        movesCount = 0;&#10;    }&#10;&#10;    private void setupBoardClickListeners() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                final int row = i;&#10;                final int col = j;&#10;                cells[i][j].setOnClickListener(v -&gt; onCellClicked(row, col));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onCellClicked(int row, int col) {&#10;        if (!gameActive || board[row][col] != null || currentPlayer != PLAYER_X) {&#10;            return; // Invalid move&#10;        }&#10;&#10;        makeMove(row, col, PLAYER_X);&#10;&#10;        if (gameActive &amp;&amp; currentPlayer == PLAYER_O &amp;&amp; gameMode.equals(&quot;single&quot;)) {&#10;            // AI's turn - delay for better UX&#10;            disableBoardInteraction();&#10;            handler.postDelayed(() -&gt; {&#10;                makeAIMove();&#10;                enableBoardInteraction();&#10;            }, 500 + random.nextInt(500)); // Random delay 500-1000ms&#10;        }&#10;    }&#10;&#10;    private void makeMove(int row, int col, String player) {&#10;        board[row][col] = player;&#10;        cells[row][col].setText(player);&#10;&#10;        // Style the cell based on player&#10;        if (player.equals(PLAYER_X)) {&#10;            cells[row][col].setTextColor(getResources().getColor(R.color.primary, null));&#10;        } else {&#10;            cells[row][col].setTextColor(getResources().getColor(R.color.secondary, null));&#10;        }&#10;&#10;        cells[row][col].setEnabled(false);&#10;        movesCount++;&#10;&#10;        // Check for win or draw&#10;        if (checkWinner(player)) {&#10;            gameActive = false;&#10;            onGameEnd(player);&#10;        } else if (movesCount == 9) {&#10;            gameActive = false;&#10;            onGameEnd(null); // Draw&#10;        } else {&#10;            // Switch player&#10;            currentPlayer = currentPlayer.equals(PLAYER_X) ? PLAYER_O : PLAYER_X;&#10;            updateTurnDisplay();&#10;        }&#10;    }&#10;&#10;    private void makeAIMove() {&#10;        if (!gameActive) return;&#10;&#10;        // Use minimax algorithm for intelligent AI&#10;        int[] bestMove = findBestMove();&#10;&#10;        if (bestMove != null) {&#10;            makeMove(bestMove[0], bestMove[1], PLAYER_O);&#10;        }&#10;    }&#10;&#10;    // Minimax algorithm for AI&#10;    private int[] findBestMove() {&#10;        int bestScore = Integer.MIN_VALUE;&#10;        int[] bestMove = null;&#10;&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    board[i][j] = PLAYER_O;&#10;                    int score = minimax(0, false);&#10;                    board[i][j] = null;&#10;&#10;                    if (score &gt; bestScore) {&#10;                        bestScore = score;&#10;                        bestMove = new int[]{i, j};&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        return bestMove;&#10;    }&#10;&#10;    private int minimax(int depth, boolean isMaximizing) {&#10;        // Check terminal states&#10;        if (checkWinner(PLAYER_O)) return 10 - depth;&#10;        if (checkWinner(PLAYER_X)) return depth - 10;&#10;        if (isBoardFull()) return 0;&#10;&#10;        if (isMaximizing) {&#10;            int bestScore = Integer.MIN_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_O;&#10;                        int score = minimax(depth + 1, false);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.max(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        } else {&#10;            int bestScore = Integer.MAX_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_X;&#10;                        int score = minimax(depth + 1, true);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.min(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        }&#10;    }&#10;&#10;    private boolean checkWinner(String player) {&#10;        // Check rows&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            if (board[i][0] != null &amp;&amp; board[i][0].equals(player) &amp;&amp;&#10;                board[i][1] != null &amp;&amp; board[i][1].equals(player) &amp;&amp;&#10;                board[i][2] != null &amp;&amp; board[i][2].equals(player)) {&#10;                highlightWinningCells(new int[][]{{i,0}, {i,1}, {i,2}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check columns&#10;        for (int j = 0; j &lt; 3; j++) {&#10;            if (board[0][j] != null &amp;&amp; board[0][j].equals(player) &amp;&amp;&#10;                board[1][j] != null &amp;&amp; board[1][j].equals(player) &amp;&amp;&#10;                board[2][j] != null &amp;&amp; board[2][j].equals(player)) {&#10;                highlightWinningCells(new int[][]{{0,j}, {1,j}, {2,j}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check diagonals&#10;        if (board[0][0] != null &amp;&amp; board[0][0].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][2] != null &amp;&amp; board[2][2].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,0}, {1,1}, {2,2}});&#10;            return true;&#10;        }&#10;&#10;        if (board[0][2] != null &amp;&amp; board[0][2].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][0] != null &amp;&amp; board[2][0].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,2}, {1,1}, {2,0}});&#10;            return true;&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private void highlightWinningCells(int[][] winningCells) {&#10;        int highlightColor = getResources().getColor(R.color.accent, null);&#10;        for (int[] cell : winningCells) {&#10;            cells[cell[0]][cell[1]].setBackgroundTintList(&#10;                android.content.res.ColorStateList.valueOf(highlightColor)&#10;            );&#10;        }&#10;    }&#10;&#10;    private boolean isBoardFull() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void disableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setClickable(false);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void enableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    cells[i][j].setClickable(true);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onGameEnd(String winner) {&#10;        disableBoardInteraction();&#10;&#10;        if (winner != null) {&#10;            if (winner.equals(PLAYER_X)) {&#10;                player1Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(true), 800);&#10;            } else {&#10;                player2Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(false), 800);&#10;            }&#10;        } else {&#10;            // Draw&#10;            handler.postDelayed(() -&gt; showGameEndDialog(null), 800);&#10;        }&#10;    }&#10;&#10;    private void showGameEndDialog(Boolean player1Won) {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1 &amp;&amp; player1Won != null) {&#10;            // Update user stats&#10;            int finalScore = player1Won ? player1Score : player2Score;&#10;            statsManager.recordGameResult(player1Won, finalScore);&#10;        }&#10;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;&#10;        if (player1Won == null) {&#10;            builder.setTitle(&quot;It's a Draw!&quot;);&#10;            builder.setMessage(&quot;Good game!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else if (player1Won) {&#10;            builder.setTitle(&quot;You Win! &quot;);&#10;            builder.setMessage(&quot;Congratulations!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else {&#10;            builder.setTitle(&quot;AI Wins!&quot;);&#10;            builder.setMessage(&quot;Better luck next time!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        }&#10;&#10;        builder.setPositiveButton(&quot;Play Again&quot;, (dialog, which) -&gt; resetRound());&#10;        builder.setNegativeButton(&quot;Exit&quot;, (dialog, which) -&gt; finish());&#10;        builder.setCancelable(false);&#10;        builder.show();&#10;    }&#10;&#10;    private void resetRound() {&#10;        // Clear the board for next round&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        getResources().getColor(R.color.cardBackground, null)&#10;                    )&#10;                );&#10;            }&#10;        }&#10;        initializeBoard();&#10;        enableBoardInteraction();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void loadPlayerInfo() {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1) {&#10;            User user = userDao.getUserById(userId);&#10;            if (user != null) {&#10;                tvPlayer1Name.setText(user.getUsername());&#10;            }&#10;        } else {&#10;            tvPlayer1Name.setText(&quot;Guest&quot;);&#10;        }&#10;&#10;        // Set opponent based on game mode&#10;        switch (gameMode) {&#10;            case &quot;single&quot;:&#10;                tvPlayer2Name.setText(&quot;AI Opponent&quot;);&#10;                break;&#10;            case &quot;quick&quot;:&#10;            case &quot;room&quot;:&#10;                tvPlayer2Name.setText(&quot;Waiting for opponent...&quot;);&#10;                break;&#10;            default:&#10;                tvPlayer2Name.setText(&quot;Player 2&quot;);&#10;                break;&#10;        }&#10;&#10;        updateScoreDisplay();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnMenu.setOnClickListener(v -&gt; showMenuDialog());&#10;&#10;        btnInfo.setOnClickListener(v -&gt; {&#10;            // Show game info or rules&#10;            Intent intent = new Intent(GameActivity.this, HowToPlayActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void showMenuDialog() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Game Menu&quot;);&#10;&#10;        String[] options = {&quot;Resume&quot;, &quot;New Game&quot;, &quot;Settings&quot;, &quot;Quit&quot;};&#10;&#10;        builder.setItems(options, (dialog, which) -&gt; {&#10;            switch (which) {&#10;                case 0: // Resume&#10;                    dialog.dismiss();&#10;                    break;&#10;                case 1: // New Game&#10;                    showNewGameConfirmation();&#10;                    break;&#10;                case 2: // Settings&#10;                    Intent intent = new Intent(GameActivity.this, SettingsActivity.class);&#10;                    startActivity(intent);&#10;                    break;&#10;                case 3: // Quit&#10;                    showQuitConfirmation();&#10;                    break;&#10;            }&#10;        });&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private void showNewGameConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;New Game&quot;);&#10;        builder.setMessage(&quot;Are you sure you want to start a new game? Current scores will be reset.&quot;);&#10;&#10;        builder.setPositiveButton(&quot;New Game&quot;, (dialog, which) -&gt; {&#10;            player1Score = 0;&#10;            player2Score = 0;&#10;            updateScoreDisplay();&#10;            resetRound();&#10;            Toast.makeText(this, &quot;New game started&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    private void showQuitConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Quit Game&quot;);&#10;        builder.setMessage(&quot;Are you sure you want to quit?&quot;);&#10;&#10;        builder.setPositiveButton(&quot;Quit&quot;, (dialog, which) -&gt; finish());&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    private void updateScoreDisplay() {&#10;        tvPlayer1Score.setText(String.valueOf(player1Score));&#10;        tvPlayer2Score.setText(String.valueOf(player2Score));&#10;    }&#10;&#10;    private void updateTurnDisplay() {&#10;        if (currentPlayer.equals(PLAYER_X)) {&#10;            tvCurrentTurn.setText(tvPlayer1Name.getText() + &quot;'s Turn&quot;);&#10;        } else {&#10;            tvCurrentTurn.setText(tvPlayer2Name.getText() + &quot;'s Turn&quot;);&#10;        }&#10;    }&#10;&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        showQuitConfirmation();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.OnBackPressedCallback;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.tabletussle.database.AppDatabase;&#10;import com.example.tabletussle.database.GameStatsManager;&#10;import com.example.tabletussle.database.User;&#10;import com.example.tabletussle.database.UserDao;&#10;import com.example.tabletussle.database.UserSession;&#10;import com.google.android.material.button.MaterialButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Random;&#10;&#10;public class GameActivity extends AppCompatActivity {&#10;&#10;    private TextView tvPlayer1Name, tvPlayer2Name;&#10;    private TextView tvPlayer1Score, tvPlayer2Score;&#10;    private TextView tvCurrentTurn;&#10;    private ImageButton btnMenu, btnInfo;&#10;&#10;    // Game board cells&#10;    private MaterialButton[][] cells = new MaterialButton[3][3];&#10;&#10;    // Game state&#10;    private String[][] board = new String[3][3]; // &quot;X&quot;, &quot;O&quot;, or null&#10;    private static final String PLAYER_X = &quot;X&quot;; // Human player&#10;    private static final String PLAYER_O = &quot;O&quot;; // AI player&#10;    private String currentPlayer = PLAYER_X;&#10;    private boolean gameActive = true;&#10;    private int movesCount = 0;&#10;&#10;    private UserSession userSession;&#10;    private AppDatabase database;&#10;    private UserDao userDao;&#10;    private GameStatsManager statsManager;&#10;&#10;    private String gameMode; // &quot;single&quot;, &quot;quick&quot;, &quot;room&quot;&#10;    private String roomCode;&#10;    private int player1Score = 0;&#10;    private int player2Score = 0;&#10;&#10;    private Handler handler = new Handler(Looper.getMainLooper());&#10;    private Random random = new Random();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_game);&#10;&#10;        // Initialize database and session&#10;        database = AppDatabase.getInstance(this);&#10;        userDao = database.userDao();&#10;        userSession = new UserSession(this);&#10;        statsManager = new GameStatsManager(this);&#10;&#10;        // Get game mode from intent&#10;        Intent intent = getIntent();&#10;        gameMode = intent.getStringExtra(&quot;GAME_MODE&quot;);&#10;        if (gameMode == null) {&#10;            gameMode = &quot;single&quot;; // Default to single player&#10;        }&#10;        roomCode = intent.getStringExtra(&quot;ROOM_CODE&quot;);&#10;&#10;        initializeViews();&#10;        initializeBoard();&#10;        loadPlayerInfo();&#10;        setupClickListeners();&#10;        setupBoardClickListeners();&#10;&#10;        // Handle back button press&#10;        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {&#10;            @Override&#10;            public void handleOnBackPressed() {&#10;                showQuitConfirmation();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvPlayer1Name = findViewById(R.id.tvPlayer1Name);&#10;        tvPlayer2Name = findViewById(R.id.tvPlayer2Name);&#10;        tvPlayer1Score = findViewById(R.id.tvPlayer1Score);&#10;        tvPlayer2Score = findViewById(R.id.tvPlayer2Score);&#10;        tvCurrentTurn = findViewById(R.id.tvCurrentTurn);&#10;        btnMenu = findViewById(R.id.btnMenu);&#10;        btnInfo = findViewById(R.id.btnInfo);&#10;&#10;        // Initialize cell buttons&#10;        cells[0][0] = findViewById(R.id.cell_0_0);&#10;        cells[0][1] = findViewById(R.id.cell_0_1);&#10;        cells[0][2] = findViewById(R.id.cell_0_2);&#10;        cells[1][0] = findViewById(R.id.cell_1_0);&#10;        cells[1][1] = findViewById(R.id.cell_1_1);&#10;        cells[1][2] = findViewById(R.id.cell_1_2);&#10;        cells[2][0] = findViewById(R.id.cell_2_0);&#10;        cells[2][1] = findViewById(R.id.cell_2_1);&#10;        cells[2][2] = findViewById(R.id.cell_2_2);&#10;    }&#10;&#10;    private void initializeBoard() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                board[i][j] = null;&#10;                cells[i][j].setText(&quot;&quot;);&#10;                cells[i][j].setEnabled(true);&#10;            }&#10;        }&#10;        currentPlayer = PLAYER_X;&#10;        gameActive = true;&#10;        movesCount = 0;&#10;    }&#10;&#10;    private void setupBoardClickListeners() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                final int row = i;&#10;                final int col = j;&#10;                cells[i][j].setOnClickListener(v -&gt; onCellClicked(row, col));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onCellClicked(int row, int col) {&#10;        if (!gameActive || board[row][col] != null || currentPlayer != PLAYER_X) {&#10;            return; // Invalid move&#10;        }&#10;&#10;        makeMove(row, col, PLAYER_X);&#10;&#10;        if (gameActive &amp;&amp; currentPlayer == PLAYER_O &amp;&amp; gameMode.equals(&quot;single&quot;)) {&#10;            // AI's turn - delay for better UX&#10;            disableBoardInteraction();&#10;            handler.postDelayed(() -&gt; {&#10;                makeAIMove();&#10;                enableBoardInteraction();&#10;            }, 500 + random.nextInt(500)); // Random delay 500-1000ms&#10;        }&#10;    }&#10;&#10;    private void makeMove(int row, int col, String player) {&#10;        board[row][col] = player;&#10;        cells[row][col].setText(player);&#10;&#10;        // Style the cell based on player&#10;        if (player.equals(PLAYER_X)) {&#10;            cells[row][col].setTextColor(getResources().getColor(R.color.primary, null));&#10;        } else {&#10;            cells[row][col].setTextColor(getResources().getColor(R.color.secondary, null));&#10;        }&#10;&#10;        cells[row][col].setEnabled(false);&#10;        movesCount++;&#10;&#10;        // Check for win or draw&#10;        if (checkWinner(player)) {&#10;            gameActive = false;&#10;            onGameEnd(player);&#10;        } else if (movesCount == 9) {&#10;            gameActive = false;&#10;            onGameEnd(null); // Draw&#10;        } else {&#10;            // Switch player&#10;            currentPlayer = currentPlayer.equals(PLAYER_X) ? PLAYER_O : PLAYER_X;&#10;            updateTurnDisplay();&#10;        }&#10;    }&#10;&#10;    private void makeAIMove() {&#10;        if (!gameActive) return;&#10;&#10;        // Use minimax algorithm for intelligent AI&#10;        int[] bestMove = findBestMove();&#10;&#10;        if (bestMove != null) {&#10;            makeMove(bestMove[0], bestMove[1], PLAYER_O);&#10;        }&#10;    }&#10;&#10;    // Minimax algorithm for AI&#10;    private int[] findBestMove() {&#10;        int bestScore = Integer.MIN_VALUE;&#10;        int[] bestMove = null;&#10;&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    board[i][j] = PLAYER_O;&#10;                    int score = minimax(0, false);&#10;                    board[i][j] = null;&#10;&#10;                    if (score &gt; bestScore) {&#10;                        bestScore = score;&#10;                        bestMove = new int[]{i, j};&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        return bestMove;&#10;    }&#10;&#10;    private int minimax(int depth, boolean isMaximizing) {&#10;        // Check terminal states&#10;        if (checkWinner(PLAYER_O)) return 10 - depth;&#10;        if (checkWinner(PLAYER_X)) return depth - 10;&#10;        if (isBoardFull()) return 0;&#10;&#10;        if (isMaximizing) {&#10;            int bestScore = Integer.MIN_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_O;&#10;                        int score = minimax(depth + 1, false);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.max(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        } else {&#10;            int bestScore = Integer.MAX_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_X;&#10;                        int score = minimax(depth + 1, true);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.min(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        }&#10;    }&#10;&#10;    private boolean checkWinner(String player) {&#10;        // Check rows&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            if (board[i][0] != null &amp;&amp; board[i][0].equals(player) &amp;&amp;&#10;                board[i][1] != null &amp;&amp; board[i][1].equals(player) &amp;&amp;&#10;                board[i][2] != null &amp;&amp; board[i][2].equals(player)) {&#10;                highlightWinningCells(new int[][]{{i,0}, {i,1}, {i,2}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check columns&#10;        for (int j = 0; j &lt; 3; j++) {&#10;            if (board[0][j] != null &amp;&amp; board[0][j].equals(player) &amp;&amp;&#10;                board[1][j] != null &amp;&amp; board[1][j].equals(player) &amp;&amp;&#10;                board[2][j] != null &amp;&amp; board[2][j].equals(player)) {&#10;                highlightWinningCells(new int[][]{{0,j}, {1,j}, {2,j}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check diagonals&#10;        if (board[0][0] != null &amp;&amp; board[0][0].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][2] != null &amp;&amp; board[2][2].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,0}, {1,1}, {2,2}});&#10;            return true;&#10;        }&#10;&#10;        if (board[0][2] != null &amp;&amp; board[0][2].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][0] != null &amp;&amp; board[2][0].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,2}, {1,1}, {2,0}});&#10;            return true;&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private void highlightWinningCells(int[][] winningCells) {&#10;        int highlightColor = getResources().getColor(R.color.accent, null);&#10;        for (int[] cell : winningCells) {&#10;            cells[cell[0]][cell[1]].setBackgroundTintList(&#10;                android.content.res.ColorStateList.valueOf(highlightColor)&#10;            );&#10;        }&#10;    }&#10;&#10;    private boolean isBoardFull() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void disableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setClickable(false);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void enableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    cells[i][j].setClickable(true);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onGameEnd(String winner) {&#10;        disableBoardInteraction();&#10;&#10;        if (winner != null) {&#10;            if (winner.equals(PLAYER_X)) {&#10;                player1Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(true), 800);&#10;            } else {&#10;                player2Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(false), 800);&#10;            }&#10;        } else {&#10;            // Draw&#10;            handler.postDelayed(() -&gt; showGameEndDialog(null), 800);&#10;        }&#10;    }&#10;&#10;    private void showGameEndDialog(Boolean player1Won) {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1 &amp;&amp; player1Won != null) {&#10;            // Update user stats&#10;            int finalScore = player1Won ? player1Score : player2Score;&#10;            statsManager.recordGameResult(player1Won, finalScore);&#10;        }&#10;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;&#10;        if (player1Won == null) {&#10;            builder.setTitle(&quot;It's a Draw!&quot;);&#10;            builder.setMessage(&quot;Good game!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else if (player1Won) {&#10;            builder.setTitle(&quot;You Win! &quot;);&#10;            builder.setMessage(&quot;Congratulations!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else {&#10;            builder.setTitle(&quot;AI Wins!&quot;);&#10;            builder.setMessage(&quot;Better luck next time!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        }&#10;&#10;        builder.setPositiveButton(&quot;Play Again&quot;, (dialog, which) -&gt; resetRound());&#10;        builder.setNegativeButton(&quot;Exit&quot;, (dialog, which) -&gt; finish());&#10;        builder.setCancelable(false);&#10;        builder.show();&#10;    }&#10;&#10;    private void resetRound() {&#10;        // Clear the board for next round&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        ContextCompat.getColor(this, R.color.cardBackground)&#10;                    )&#10;                );&#10;            }&#10;        }&#10;        initializeBoard();&#10;        enableBoardInteraction();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void loadPlayerInfo() {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1) {&#10;            User user = userDao.getUserById(userId);&#10;            if (user != null) {&#10;                tvPlayer1Name.setText(user.getUsername());&#10;            }&#10;        } else {&#10;            tvPlayer1Name.setText(&quot;Guest&quot;);&#10;        }&#10;&#10;        // Set opponent based on game mode&#10;        switch (gameMode) {&#10;            case &quot;single&quot;:&#10;                tvPlayer2Name.setText(&quot;AI Opponent&quot;);&#10;                break;&#10;            case &quot;quick&quot;:&#10;            case &quot;room&quot;:&#10;                tvPlayer2Name.setText(&quot;Waiting for opponent...&quot;);&#10;                break;&#10;            default:&#10;                tvPlayer2Name.setText(&quot;Player 2&quot;);&#10;                break;&#10;        }&#10;&#10;        updateScoreDisplay();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnMenu.setOnClickListener(v -&gt; showMenuDialog());&#10;&#10;        btnInfo.setOnClickListener(v -&gt; {&#10;            // Show game info or rules&#10;            Intent intent = new Intent(GameActivity.this, HowToPlayActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void showMenuDialog() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Game Menu&quot;);&#10;&#10;        String[] options = {&quot;Resume&quot;, &quot;New Game&quot;, &quot;Settings&quot;, &quot;Quit&quot;};&#10;&#10;        builder.setItems(options, (dialog, which) -&gt; {&#10;            switch (which) {&#10;                case 0: // Resume&#10;                    dialog.dismiss();&#10;                    break;&#10;                case 1: // New Game&#10;                    showNewGameConfirmation();&#10;                    break;&#10;                case 2: // Settings&#10;                    Intent intent = new Intent(GameActivity.this, SettingsActivity.class);&#10;                    startActivity(intent);&#10;                    break;&#10;                case 3: // Quit&#10;                    showQuitConfirmation();&#10;                    break;&#10;            }&#10;        });&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private void showNewGameConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;New Game&quot;);&#10;        builder.setMessage(&quot;Are you sure you want to start a new game? Current scores will be reset.&quot;);&#10;&#10;        builder.setPositiveButton(&quot;New Game&quot;, (dialog, which) -&gt; {&#10;            player1Score = 0;&#10;            player2Score = 0;&#10;            updateScoreDisplay();&#10;            resetRound();&#10;            Toast.makeText(this, &quot;New game started&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    private void showQuitConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Quit Game&quot;);&#10;        builder.setMessage(&quot;Are you sure you want to quit?&quot;);&#10;&#10;        builder.setPositiveButton(&quot;Quit&quot;, (dialog, which) -&gt; finish());&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    private void updateScoreDisplay() {&#10;        tvPlayer1Score.setText(String.valueOf(player1Score));&#10;        tvPlayer2Score.setText(String.valueOf(player2Score));&#10;    }&#10;&#10;    private void updateTurnDisplay() {&#10;        if (currentPlayer.equals(PLAYER_X)) {&#10;            tvCurrentTurn.setText(tvPlayer1Name.getText() + &quot;'s Turn&quot;);&#10;        } else {&#10;            tvCurrentTurn.setText(tvPlayer2Name.getText() + &quot;'s Turn&quot;);&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_game.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_game.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&#10;    tools:context=&quot;.GameActivity&quot;&gt;&#10;&#10;    &lt;!-- Top Bar --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/topBar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMenu&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;Menu&quot;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#10;                android:tint=&quot;@color/primary&quot; /&gt;&#10;&#10;            &lt;Space&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot; /&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnInfo&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;Info&quot;&#10;                android:src=&quot;@drawable/ic_info&quot;&#10;                android:tint=&quot;@color/primary&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Player 1 Info --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/player1Card&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@+id/player2Card&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/topBar&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer1Name&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Player 1&quot;&#10;                android:textColor=&quot;@color/textPrimary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer1Score&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:text=&quot;0&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Player 2 Info --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/player2Card&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toEndOf=&quot;@+id/player1Card&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/topBar&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer2Name&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Player 2&quot;&#10;                android:textColor=&quot;@color/textPrimary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer2Score&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:text=&quot;0&quot;&#10;                android:textColor=&quot;@color/secondary&quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Game Board --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/gameBoardCard&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:cardElevation=&quot;8dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/currentTurnCard&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/player1Card&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;24dp&quot;&gt;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Game Board&quot;&#10;                android:textColor=&quot;@color/textSecondary&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&#10;    tools:context=&quot;.GameActivity&quot;&gt;&#10;&#10;    &lt;!-- Top Bar --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/topBar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMenu&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;@string/menu&quot;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#10;                app:tint=&quot;@color/primary&quot; /&gt;&#10;&#10;            &lt;Space&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot; /&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnInfo&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;@string/info&quot;&#10;                android:src=&quot;@drawable/ic_info&quot;&#10;                app:tint=&quot;@color/primary&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Player 1 Info --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/player1Card&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@+id/player2Card&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/topBar&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer1Name&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/player_1&quot;&#10;                android:textColor=&quot;@color/textPrimary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer1Score&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:text=&quot;@string/zero&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Player 2 Info --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/player2Card&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toEndOf=&quot;@+id/player1Card&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/topBar&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer2Name&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/player_2&quot;&#10;                android:textColor=&quot;@color/textPrimary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPlayer2Score&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:text=&quot;@string/zero&quot;&#10;                android:textColor=&quot;@color/secondary&quot;&#10;                android:textSize=&quot;32sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Game Board --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/gameBoardCard&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:cardElevation=&quot;8dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@+id/currentTurnCard&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@+id/player1Card&quot;&gt;&#10;&#10;        &lt;GridLayout&#10;            android:id=&quot;@+id/gameBoard&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:columnCount=&quot;3&quot;&#10;            android:rowCount=&quot;3&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Row 1 --&gt;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_0_0&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_0_1&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_0_2&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;!-- Row 2 --&gt;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_1_0&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_1_1&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_1_2&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;!-- Row 3 --&gt;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_2_0&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_2_1&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/cell_2_2&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_rowWeight=&quot;1&quot;&#10;                android:layout_columnWeight=&quot;1&quot;&#10;                android:layout_margin=&quot;4dp&quot;&#10;                android:backgroundTint=&quot;@color/cardBackground&quot;&#10;                android:textColor=&quot;@color/primary&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:strokeColor=&quot;@color/cardStroke&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;/GridLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Current Turn Indicator --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/currentTurnCard&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;12dp&quot;&#10;        app:cardElevation=&quot;4dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvCurrentTurn&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:text=&quot;@string/player_turn&quot;&#10;            android:textColor=&quot;@color/primary&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Board Game Theme Colors --&gt;&#10;    &lt;color name=&quot;primary_dark&quot;&gt;#1A1A2E&lt;/color&gt;&#10;    &lt;color name=&quot;primary_medium&quot;&gt;#16213E&lt;/color&gt;&#10;    &lt;color name=&quot;accent_gold&quot;&gt;#E94560&lt;/color&gt;&#10;    &lt;color name=&quot;accent_light&quot;&gt;#0F3460&lt;/color&gt;&#10;    &lt;color name=&quot;card_background&quot;&gt;#252A48&lt;/color&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#B8B8D1&lt;/color&gt;&#10;    &lt;color name=&quot;button_primary&quot;&gt;#E94560&lt;/color&gt;&#10;    &lt;color name=&quot;button_secondary&quot;&gt;#533483&lt;/color&gt;&#10;&#10;    &lt;!-- Additional Theme Colors --&gt;&#10;    &lt;color name=&quot;background&quot;&gt;#16213E&lt;/color&gt;&#10;    &lt;color name=&quot;background_dark&quot;&gt;#1A1A2E&lt;/color&gt;&#10;    &lt;color name=&quot;primary&quot;&gt;#E94560&lt;/color&gt;&#10;    &lt;color name=&quot;secondary&quot;&gt;#533483&lt;/color&gt;&#10;    &lt;color name=&quot;textSecondary&quot;&gt;#B8B8D1&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#FF5252&lt;/color&gt;&#10;    &lt;color name=&quot;divider&quot;&gt;#3D3D5C&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;zxing_custom_result_view&quot;&gt;#b0000000&lt;/color&gt;&#10;    &lt;color name=&quot;zxing_custom_viewfinder_mask&quot;&gt;#60000000&lt;/color&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Board Game Theme Colors --&gt;&#10;    &lt;color name=&quot;primary_dark&quot;&gt;#1A1A2E&lt;/color&gt;&#10;    &lt;color name=&quot;primary_medium&quot;&gt;#16213E&lt;/color&gt;&#10;    &lt;color name=&quot;accent_gold&quot;&gt;#E94560&lt;/color&gt;&#10;    &lt;color name=&quot;accent_light&quot;&gt;#0F3460&lt;/color&gt;&#10;    &lt;color name=&quot;card_background&quot;&gt;#252A48&lt;/color&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#B8B8D1&lt;/color&gt;&#10;    &lt;color name=&quot;button_primary&quot;&gt;#E94560&lt;/color&gt;&#10;    &lt;color name=&quot;button_secondary&quot;&gt;#533483&lt;/color&gt;&#10;&#10;    &lt;!-- Additional Theme Colors --&gt;&#10;    &lt;color name=&quot;background&quot;&gt;#16213E&lt;/color&gt;&#10;    &lt;color name=&quot;background_dark&quot;&gt;#1A1A2E&lt;/color&gt;&#10;    &lt;color name=&quot;primary&quot;&gt;#E94560&lt;/color&gt;&#10;    &lt;color name=&quot;secondary&quot;&gt;#533483&lt;/color&gt;&#10;    &lt;color name=&quot;accent&quot;&gt;#FFD700&lt;/color&gt;&#10;    &lt;color name=&quot;textPrimary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;textSecondary&quot;&gt;#B8B8D1&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#FF5252&lt;/color&gt;&#10;    &lt;color name=&quot;divider&quot;&gt;#3D3D5C&lt;/color&gt;&#10;&#10;    &lt;color name=&quot;cardBackground&quot;&gt;#252A48&lt;/color&gt;&#10;    &lt;color name=&quot;cardStroke&quot;&gt;#3D3D5C&lt;/color&gt;&#10;    &lt;color name=&quot;zxing_custom_result_view&quot;&gt;#b0000000&lt;/color&gt;&#10;    &lt;color name=&quot;zxing_custom_viewfinder_mask&quot;&gt;#60000000&lt;/color&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;TableTussle&lt;/string&gt;&#10;&#10;    &lt;!-- Home Page Strings --&gt;&#10;    &lt;string name=&quot;app_title&quot;&gt;Table Tussle&lt;/string&gt;&#10;    &lt;string name=&quot;app_tagline&quot;&gt;Master the Art of Tic Tac Toe!&lt;/string&gt;&#10;    &lt;string name=&quot;play_now&quot;&gt;Play Now&lt;/string&gt;&#10;    &lt;string name=&quot;how_to_play&quot;&gt;How to Play&lt;/string&gt;&#10;    &lt;string name=&quot;statistics&quot;&gt;Statistics&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;about&quot;&gt;About&lt;/string&gt;&#10;    &lt;string name=&quot;quick_match&quot;&gt;Quick Match&lt;/string&gt;&#10;    &lt;string name=&quot;create_room&quot;&gt;Create Room&lt;/string&gt;&#10;    &lt;string name=&quot;join_room&quot;&gt;Join Room&lt;/string&gt;&#10;&#10;    &lt;!-- Authentication Strings --&gt;&#10;    &lt;string name=&quot;welcome_back&quot;&gt;Welcome Back!&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Confirm Password&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Forgot Password?&lt;/string&gt;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Don\'t have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;register_now&quot;&gt;Register Now&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Already have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;login_now&quot;&gt;Login Now&lt;/string&gt;&#10;    &lt;string name=&quot;continue_as_guest&quot;&gt;Continue as Guest&lt;/string&gt;&#10;    &lt;string name=&quot;create_account&quot;&gt;Create Account&lt;/string&gt;&#10;    &lt;string name=&quot;join_the_game&quot;&gt;Join the game community!&lt;/string&gt;&#10;&#10;    &lt;!-- Profile Strings --&gt;&#10;    &lt;string name=&quot;game_statistics&quot;&gt;Game Statistics&lt;/string&gt;&#10;    &lt;string name=&quot;games_played&quot;&gt;Games Played&lt;/string&gt;&#10;    &lt;string name=&quot;games_won&quot;&gt;Games Won&lt;/string&gt;&#10;    &lt;string name=&quot;win_rate&quot;&gt;Win Rate&lt;/string&gt;&#10;    &lt;string name=&quot;total_score&quot;&gt;Total Score&lt;/string&gt;&#10;    &lt;string name=&quot;profile_actions&quot;&gt;Profile Actions&lt;/string&gt;&#10;    &lt;string name=&quot;achievements&quot;&gt;Achievements&lt;/string&gt;&#10;    &lt;string name=&quot;friends&quot;&gt;Friends&lt;/string&gt;&#10;    &lt;string name=&quot;game_history&quot;&gt;Game History&lt;/string&gt;&#10;    &lt;string name=&quot;edit_profile&quot;&gt;Edit Profile&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Logout&lt;/string&gt;&#10;    &lt;string name=&quot;view_details&quot;&gt;View Details&lt;/string&gt;&#10;&#10;    &lt;!-- Game Activity Strings --&gt;&#10;    &lt;string name=&quot;menu&quot;&gt;Menu&lt;/string&gt;&#10;    &lt;string name=&quot;info&quot;&gt;Info&lt;/string&gt;&#10;    &lt;string name=&quot;player_1&quot;&gt;Player 1&lt;/string&gt;&#10;    &lt;string name=&quot;player_2&quot;&gt;Player 2&lt;/string&gt;&#10;    &lt;string name=&quot;zero&quot;&gt;0&lt;/string&gt;&#10;    &lt;string name=&quot;player_turn&quot;&gt;Player 1\'s Turn&lt;/string&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;TableTussle&lt;/string&gt;&#10;&#10;    &lt;!-- Home Page Strings --&gt;&#10;    &lt;string name=&quot;app_title&quot;&gt;Table Tussle&lt;/string&gt;&#10;    &lt;string name=&quot;app_tagline&quot;&gt;Master the Art of Tic Tac Toe!&lt;/string&gt;&#10;    &lt;string name=&quot;play_now&quot;&gt;Play Now&lt;/string&gt;&#10;    &lt;string name=&quot;how_to_play&quot;&gt;How to Play&lt;/string&gt;&#10;    &lt;string name=&quot;statistics&quot;&gt;Statistics&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;about&quot;&gt;About&lt;/string&gt;&#10;    &lt;string name=&quot;quick_match&quot;&gt;Quick Match&lt;/string&gt;&#10;    &lt;string name=&quot;create_room&quot;&gt;Create Room&lt;/string&gt;&#10;    &lt;string name=&quot;join_room&quot;&gt;Join Room&lt;/string&gt;&#10;&#10;    &lt;!-- Authentication Strings --&gt;&#10;    &lt;string name=&quot;welcome_back&quot;&gt;Welcome Back!&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Confirm Password&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Forgot Password?&lt;/string&gt;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Don\'t have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;register_now&quot;&gt;Register Now&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Already have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;login_now&quot;&gt;Login Now&lt;/string&gt;&#10;    &lt;string name=&quot;continue_as_guest&quot;&gt;Continue as Guest&lt;/string&gt;&#10;    &lt;string name=&quot;create_account&quot;&gt;Create Account&lt;/string&gt;&#10;    &lt;string name=&quot;join_the_game&quot;&gt;Join the game community!&lt;/string&gt;&#10;&#10;    &lt;!-- Profile Strings --&gt;&#10;    &lt;string name=&quot;game_statistics&quot;&gt;Game Statistics&lt;/string&gt;&#10;    &lt;string name=&quot;games_played&quot;&gt;Games Played&lt;/string&gt;&#10;    &lt;string name=&quot;games_won&quot;&gt;Games Won&lt;/string&gt;&#10;    &lt;string name=&quot;win_rate&quot;&gt;Win Rate&lt;/string&gt;&#10;    &lt;string name=&quot;total_score&quot;&gt;Total Score&lt;/string&gt;&#10;    &lt;string name=&quot;profile_actions&quot;&gt;Profile Actions&lt;/string&gt;&#10;    &lt;string name=&quot;achievements&quot;&gt;Achievements&lt;/string&gt;&#10;    &lt;string name=&quot;friends&quot;&gt;Friends&lt;/string&gt;&#10;    &lt;string name=&quot;game_history&quot;&gt;Game History&lt;/string&gt;&#10;    &lt;string name=&quot;edit_profile&quot;&gt;Edit Profile&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Logout&lt;/string&gt;&#10;    &lt;string name=&quot;view_details&quot;&gt;View Details&lt;/string&gt;&#10;&#10;    &lt;!-- Game Activity Strings --&gt;&#10;    &lt;string name=&quot;menu&quot;&gt;Menu&lt;/string&gt;&#10;    &lt;string name=&quot;info&quot;&gt;Info&lt;/string&gt;&#10;    &lt;string name=&quot;player_1&quot;&gt;Player 1&lt;/string&gt;&#10;    &lt;string name=&quot;player_2&quot;&gt;Player 2&lt;/string&gt;&#10;    &lt;string name=&quot;zero&quot;&gt;0&lt;/string&gt;&#10;    &lt;string name=&quot;player_turn&quot;&gt;Player 1\'s Turn&lt;/string&gt;&#10;&#10;&lt;/resources&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>