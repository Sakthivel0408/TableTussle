<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/SETTINGS_FEATURES_IMPLEMENTATION.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SETTINGS_FEATURES_IMPLEMENTATION.md" />
              <option name="updatedContent" value="# Settings Features Implementation Summary&#10;&#10;## Overview&#10;This document describes the implementation of the four main settings features: Sound Effects, Background Music, Vibration, and Animations.&#10;&#10;## Implemented Features&#10;&#10;### 1. Sound Effects ✅&#10;**Location:** `SoundManager.java`&#10;&#10;**Features:**&#10;- Click sounds for button presses&#10;- Move sounds when placing X or O&#10;- Win sound (ascending tone)&#10;- Lose sound (descending tone)&#10;- Draw sound (neutral tone)&#10;&#10;**Implementation:**&#10;- Uses Android's `ToneGenerator` to create simple beep sounds&#10;- Different tones for different actions&#10;- Can be enabled/disabled in Settings&#10;- Automatically respects user preferences&#10;&#10;**How it works:**&#10;- When enabled, plays appropriate sound for each action&#10;- Uses system audio stream (STREAM_MUSIC)&#10;- Short, non-intrusive tones&#10;- Configurable volume (currently set to 50%)&#10;&#10;### 2. Background Music ✅&#10;**Location:** `SoundManager.java`&#10;&#10;**Features:**&#10;- Placeholder for background music playback&#10;- Pause/resume when app goes to background/foreground&#10;- Looping capability&#10;&#10;**Implementation:**&#10;- Currently uses placeholder (no actual music file included)&#10;- Ready to use `MediaPlayer` when audio files are added&#10;- Automatically pauses when activity is paused&#10;- Resumes when activity comes back to foreground&#10;&#10;**To add actual music:**&#10;1. Create `res/raw/` folder&#10;2. Add music file (e.g., `background_music.mp3`)&#10;3. Uncomment music loading code in `SoundManager.java`&#10;&#10;### 3. Vibration (Haptic Feedback) ✅&#10;**Location:** `VibrationManager.java`&#10;&#10;**Features:**&#10;- Light vibration (10ms) - for light taps&#10;- Medium vibration (25ms) - for button presses&#10;- Heavy vibration (50ms) - for game moves&#10;- Success pattern - for wins (multiple short pulses)&#10;- Error pattern - for losses (two long pulses)&#10;&#10;**Implementation:**&#10;- Uses Android's `Vibrator` service&#10;- Supports both modern (API 26+) and legacy vibration APIs&#10;- Different vibration patterns for different actions&#10;- VIBRATE permission added to AndroidManifest.xml&#10;&#10;**Vibration Types:**&#10;```java&#10;LIGHT    - Quick tap (menu navigation)&#10;MEDIUM   - Button press (standard actions)&#10;HEAVY    - Game move (X or O placement)&#10;SUCCESS  - Win pattern (celebration)&#10;ERROR    - Loss pattern (feedback)&#10;```&#10;&#10;### 4. Animations ✅&#10;**Location:** `AnimationManager.java`&#10;&#10;**Features:**&#10;- Button click animation (scale down/up)&#10;- Cell fill animation (scale from 0 to 1 with overshoot)&#10;- Winning cells animation (pulse effect)&#10;- Shake animation (for invalid moves)&#10;- Fade in/out animations&#10;- Slide animations&#10;- Bounce effect&#10;- Rotate effect&#10;&#10;**Implementation:**&#10;- Uses Android's `ViewPropertyAnimator` API&#10;- Smooth, hardware-accelerated animations&#10;- Customizable duration and interpolators&#10;- Can be toggled on/off in Settings&#10;&#10;**Animation Examples:**&#10;- **Button Click:** Scales down to 90% then back to 100%&#10;- **Cell Fill:** Animates from 0% to 100% with overshoot effect&#10;- **Winning Cells:** Pulse animation on the three winning cells&#10;- **Shake:** Horizontal shake for invalid moves&#10;&#10;## How to Use&#10;&#10;### In GameActivity&#10;```java&#10;// Play sound when move is made&#10;soundManager.playSound(SoundManager.SoundEffect.MOVE);&#10;&#10;// Vibrate when move is made&#10;vibrationManager.vibrate(VibrationManager.VibrationType.MEDIUM);&#10;&#10;// Animate cell when filled&#10;animationManager.animateCellFill(cellView);&#10;&#10;// Animate winning cells&#10;animationManager.animateWinningCells(cell1, cell2, cell3);&#10;```&#10;&#10;### In MainActivity&#10;```java&#10;// Button click feedback&#10;btnPlayNow.setOnClickListener(v -&gt; {&#10;    soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;    vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;    animationManager.animateButtonClick(v);&#10;    // ... rest of code&#10;});&#10;```&#10;&#10;### In SettingsActivity&#10;Settings are automatically saved to SharedPreferences and applied immediately:&#10;- Toggle switches update the managers in real-time&#10;- Provides instant feedback (sound/vibration when toggled)&#10;- Changes persist across app restarts&#10;&#10;## Settings Storage&#10;All settings are stored in SharedPreferences:&#10;- **Name:** `TableTussleSettings`&#10;- **Keys:**&#10;  - `sound_effects` (boolean)&#10;  - `background_music` (boolean)&#10;  - `vibration` (boolean)&#10;  - `animations` (boolean)&#10;  - `dark_mode` (boolean)&#10;&#10;## Lifecycle Management&#10;&#10;### GameActivity&#10;- `onResume()`: Updates settings and resumes background music&#10;- `onPause()`: Pauses background music&#10;- `onDestroy()`: Stops music and cancels vibrations&#10;&#10;### MainActivity&#10;- `onResume()`: Updates all manager settings&#10;&#10;## Permissions Required&#10;```xml&#10;&lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;&#10;```&#10;✅ Already added to AndroidManifest.xml&#10;&#10;## Files Modified/Created&#10;&#10;### New Files Created:&#10;1. `managers/SoundManager.java` - Handles all sound effects and music&#10;2. `managers/VibrationManager.java` - Handles haptic feedback&#10;3. `managers/AnimationManager.java` - Handles UI animations&#10;&#10;### Modified Files:&#10;1. `AndroidManifest.xml` - Added VIBRATE permission&#10;2. `GameActivity.java` - Integrated all three managers&#10;3. `MainActivity.java` - Added button click feedback&#10;4. `SettingsActivity.java` - Connected toggles to managers&#10;&#10;## Testing&#10;&#10;### To Test Sound Effects:&#10;1. Open Settings&#10;2. Ensure &quot;Sound Effects&quot; is ON&#10;3. Navigate through app - hear clicks&#10;4. Play a game - hear move and result sounds&#10;&#10;### To Test Vibration:&#10;1. Open Settings&#10;2. Toggle &quot;Vibration&quot; ON/OFF - feel immediate feedback&#10;3. Navigate through app - feel light vibrations&#10;4. Play a game - feel different vibration patterns&#10;&#10;### To Test Animations:&#10;1. Open Settings&#10;2. Ensure &quot;Animations&quot; is ON&#10;3. Click buttons - see scale animation&#10;4. Play a game - see cell fill animations&#10;5. Win a game - see winning cells pulse&#10;&#10;### To Test Background Music:&#10;1. Open Settings&#10;2. Toggle &quot;Background Music&quot; ON&#10;3. Currently plays placeholder (no audio file)&#10;4. To add real music: Add MP3/OGG file to res/raw/&#10;&#10;## Future Enhancements&#10;&#10;### Sound Effects&#10;- [ ] Add actual sound effect files (MP3/OGG)&#10;- [ ] Add more varied sounds (celebrations, special moves)&#10;- [ ] Volume controls in settings&#10;&#10;### Background Music&#10;- [ ] Add background music tracks&#10;- [ ] Multiple music track options&#10;- [ ] Fade in/out transitions&#10;&#10;### Vibration&#10;- [ ] Custom vibration patterns&#10;- [ ] Intensity settings&#10;&#10;### Animations&#10;- [ ] More complex animations&#10;- [ ] Particle effects for wins&#10;- [ ] Confetti animation&#10;&#10;## Notes&#10;- All features work independently - users can enable/disable each one&#10;- Settings persist across app sessions&#10;- Minimal battery impact when disabled&#10;- Follows Android best practices for multimedia&#10;- Thread-safe singleton pattern for all managers&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Camera permission for QR code scanning --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;false&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.TableTussle&quot;&gt;&#10;&#10;        &lt;!-- Login Activity - Launch Screen --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- Register Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.LoginActivity&quot;/&gt;&#10;&#10;        &lt;!-- Main Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;&#10;        &lt;!-- Profile Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ProfileActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Statistics Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatisticsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Achievements Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AchievementsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.StatisticsActivity&quot;/&gt;&#10;&#10;        &lt;!-- Friends Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.FriendsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.StatisticsActivity&quot;/&gt;&#10;&#10;        &lt;!-- Game History Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.GameHistoryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.StatisticsActivity&quot;/&gt;&#10;&#10;        &lt;!-- How to Play Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HowToPlayActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Edit Profile Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.EditProfileActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Change Password Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ChangePasswordActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Notifications Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NotificationsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Settings Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Privacy Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.PrivacyActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Help Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HelpActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Game Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.GameActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot;/&gt;&#10;&#10;        &lt;!-- Quick Match Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.QuickMatchActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Create Room Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.CreateRoomActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Join Room Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.JoinRoomActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- QR Scanner Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.QRScannerActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot;&#10;            android:parentActivityName=&quot;.JoinRoomActivity&quot;/&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Camera permission for QR code scanning --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;false&quot; /&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; android:required=&quot;false&quot; /&gt;&#10;    &#10;    &lt;!-- Vibration permission for haptic feedback --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.TableTussleApp&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.TableTussle&quot;&gt;&#10;&#10;        &lt;!-- Login Activity - Launch Screen --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- Register Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.LoginActivity&quot;/&gt;&#10;&#10;        &lt;!-- Main Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;&#10;        &lt;!-- Profile Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ProfileActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Statistics Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatisticsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Achievements Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AchievementsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.StatisticsActivity&quot;/&gt;&#10;&#10;        &lt;!-- Friends Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.FriendsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.StatisticsActivity&quot;/&gt;&#10;&#10;        &lt;!-- Game History Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.GameHistoryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.StatisticsActivity&quot;/&gt;&#10;&#10;        &lt;!-- How to Play Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HowToPlayActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Edit Profile Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.EditProfileActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Change Password Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ChangePasswordActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Notifications Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NotificationsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Settings Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Privacy Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.PrivacyActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Help Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HelpActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.ProfileActivity&quot;/&gt;&#10;&#10;        &lt;!-- Game Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.GameActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;&#10;            android:screenOrientation=&quot;portrait&quot;/&gt;&#10;&#10;        &lt;!-- Quick Match Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.QuickMatchActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Create Room Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.CreateRoomActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- Join Room Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.JoinRoomActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot;/&gt;&#10;&#10;        &lt;!-- QR Scanner Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.QRScannerActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:screenOrientation=&quot;portrait&quot;&#10;            android:parentActivityName=&quot;.JoinRoomActivity&quot;/&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/MainActivity.java" />
              <option name="originalContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.card.MaterialCardView;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Profile button (top-right)&#10;        MaterialCardView btnProfile = findViewById(R.id.btnProfile);&#10;&#10;        // Main action buttons&#10;        MaterialButton btnPlayNow = findViewById(R.id.btnPlayNow);&#10;        MaterialButton btnQuickMatch = findViewById(R.id.btnQuickMatch);&#10;        MaterialButton btnCreateRoom = findViewById(R.id.btnCreateRoom);&#10;        MaterialButton btnJoinRoom = findViewById(R.id.btnJoinRoom);&#10;&#10;        // Bottom navigation cards&#10;        MaterialCardView cardHowToPlay = findViewById(R.id.cardHowToPlay);&#10;        MaterialCardView cardStatistics = findViewById(R.id.cardStatistics);&#10;        MaterialCardView cardSettings = findViewById(R.id.cardSettings);&#10;&#10;        btnProfile.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(MainActivity.this, ProfileActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnPlayNow.setOnClickListener(v -&gt; {&#10;            // Start single player game (vs AI)&#10;            Intent intent = new Intent(MainActivity.this, GameActivity.class);&#10;            intent.putExtra(&quot;GAME_MODE&quot;, &quot;single&quot;);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnQuickMatch.setOnClickListener(v -&gt; {&#10;            // Start quick match (matchmaking)&#10;            Intent intent = new Intent(MainActivity.this, QuickMatchActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnCreateRoom.setOnClickListener(v -&gt; {&#10;            // Create a new room&#10;            Intent intent = new Intent(MainActivity.this, CreateRoomActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnJoinRoom.setOnClickListener(v -&gt; {&#10;            // Join an existing room&#10;            Intent intent = new Intent(MainActivity.this, JoinRoomActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardHowToPlay.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(MainActivity.this, HowToPlayActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardStatistics.setOnClickListener(v -&gt; {&#10;            // Navigate to Statistics Activity&#10;            Intent intent = new Intent(MainActivity.this, StatisticsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardSettings.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(MainActivity.this, SettingsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.example.tabletussle.managers.AnimationManager;&#10;import com.example.tabletussle.managers.SoundManager;&#10;import com.example.tabletussle.managers.VibrationManager;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.card.MaterialCardView;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private SoundManager soundManager;&#10;    private VibrationManager vibrationManager;&#10;    private AnimationManager animationManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        // Initialize managers&#10;        soundManager = SoundManager.getInstance(this);&#10;        vibrationManager = VibrationManager.getInstance(this);&#10;        animationManager = AnimationManager.getInstance(this);&#10;&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Profile button (top-right)&#10;        MaterialCardView btnProfile = findViewById(R.id.btnProfile);&#10;&#10;        // Main action buttons&#10;        MaterialButton btnPlayNow = findViewById(R.id.btnPlayNow);&#10;        MaterialButton btnQuickMatch = findViewById(R.id.btnQuickMatch);&#10;        MaterialButton btnCreateRoom = findViewById(R.id.btnCreateRoom);&#10;        MaterialButton btnJoinRoom = findViewById(R.id.btnJoinRoom);&#10;&#10;        // Bottom navigation cards&#10;        MaterialCardView cardHowToPlay = findViewById(R.id.cardHowToPlay);&#10;        MaterialCardView cardStatistics = findViewById(R.id.cardStatistics);&#10;        MaterialCardView cardSettings = findViewById(R.id.cardSettings);&#10;&#10;        btnProfile.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;            animationManager.animateButtonClick(v);&#10;            Intent intent = new Intent(MainActivity.this, ProfileActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnPlayNow.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.MEDIUM);&#10;            animationManager.animateButtonClick(v);&#10;            // Start single player game (vs AI)&#10;            Intent intent = new Intent(MainActivity.this, GameActivity.class);&#10;            intent.putExtra(&quot;GAME_MODE&quot;, &quot;single&quot;);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnQuickMatch.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;            animationManager.animateButtonClick(v);&#10;            // Start quick match (matchmaking)&#10;            Intent intent = new Intent(MainActivity.this, QuickMatchActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnCreateRoom.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;            animationManager.animateButtonClick(v);&#10;            // Create a new room&#10;            Intent intent = new Intent(MainActivity.this, CreateRoomActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnJoinRoom.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;            animationManager.animateButtonClick(v);&#10;            // Join an existing room&#10;            Intent intent = new Intent(MainActivity.this, JoinRoomActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardHowToPlay.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;            animationManager.animateButtonClick(v);&#10;            Intent intent = new Intent(MainActivity.this, HowToPlayActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardStatistics.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;            animationManager.animateButtonClick(v);&#10;            // Navigate to Statistics Activity&#10;            Intent intent = new Intent(MainActivity.this, StatisticsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardSettings.setOnClickListener(v -&gt; {&#10;            soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            vibrationManager.vibrate(VibrationManager.VibrationType.LIGHT);&#10;            animationManager.animateButtonClick(v);&#10;            Intent intent = new Intent(MainActivity.this, SettingsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Update settings when returning to main activity&#10;        if (soundManager != null) {&#10;            soundManager.updateSettings();&#10;        }&#10;        if (vibrationManager != null) {&#10;            vibrationManager.updateSettings();&#10;        }&#10;        if (animationManager != null) {&#10;            animationManager.updateSettings();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/SettingsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/SettingsActivity.java" />
              <option name="originalContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.switchmaterial.SwitchMaterial;&#10;&#10;public class SettingsActivity extends AppCompatActivity {&#10;&#10;    private SharedPreferences sharedPreferences;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;&#10;    // Settings keys&#10;    private static final String KEY_SOUND_EFFECTS = &quot;sound_effects&quot;;&#10;    private static final String KEY_BACKGROUND_MUSIC = &quot;background_music&quot;;&#10;    private static final String KEY_VIBRATION = &quot;vibration&quot;;&#10;    private static final String KEY_DARK_MODE = &quot;dark_mode&quot;;&#10;    private static final String KEY_ANIMATIONS = &quot;animations&quot;;&#10;&#10;    // UI Components&#10;    private SwitchMaterial switchSoundEffects;&#10;    private SwitchMaterial switchBackgroundMusic;&#10;    private SwitchMaterial switchVibration;&#10;    private SwitchMaterial switchDarkMode;&#10;    private SwitchMaterial switchAnimations;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_settings);&#10;&#10;        sharedPreferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;&#10;        initializeViews();&#10;        loadSettings();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        // Back button&#10;        ImageButton btnBack = findViewById(R.id.btnBack);&#10;        btnBack.setOnClickListener(v -&gt; finish());&#10;&#10;        // Switches&#10;        switchSoundEffects = findViewById(R.id.switchSoundEffects);&#10;        switchBackgroundMusic = findViewById(R.id.switchBackgroundMusic);&#10;        switchVibration = findViewById(R.id.switchVibration);&#10;        switchDarkMode = findViewById(R.id.switchDarkMode);&#10;        switchAnimations = findViewById(R.id.switchAnimations);&#10;&#10;        // Set app version&#10;        TextView tvAppVersion = findViewById(R.id.tvAppVersion);&#10;        try {&#10;            String versionName = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;&#10;            tvAppVersion.setText(&quot;Version &quot; + versionName);&#10;        } catch (Exception e) {&#10;            tvAppVersion.setText(&quot;Version 1.0.0&quot;);&#10;        }&#10;    }&#10;&#10;    private void loadSettings() {&#10;        // Load saved preferences&#10;        switchSoundEffects.setChecked(sharedPreferences.getBoolean(KEY_SOUND_EFFECTS, true));&#10;        switchBackgroundMusic.setChecked(sharedPreferences.getBoolean(KEY_BACKGROUND_MUSIC, true));&#10;        switchVibration.setChecked(sharedPreferences.getBoolean(KEY_VIBRATION, true));&#10;        switchDarkMode.setChecked(sharedPreferences.getBoolean(KEY_DARK_MODE, true));&#10;        switchAnimations.setChecked(sharedPreferences.getBoolean(KEY_ANIMATIONS, true));&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Sound Effects&#10;        switchSoundEffects.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_SOUND_EFFECTS, isChecked);&#10;            showToast(isChecked ? &quot;Sound effects enabled&quot; : &quot;Sound effects disabled&quot;);&#10;        });&#10;&#10;        // Background Music&#10;        switchBackgroundMusic.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_BACKGROUND_MUSIC, isChecked);&#10;            showToast(isChecked ? &quot;Background music enabled&quot; : &quot;Background music disabled&quot;);&#10;        });&#10;&#10;        // Vibration&#10;        switchVibration.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_VIBRATION, isChecked);&#10;            showToast(isChecked ? &quot;Vibration enabled&quot; : &quot;Vibration disabled&quot;);&#10;        });&#10;&#10;        // Dark Mode&#10;        switchDarkMode.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_DARK_MODE, isChecked);&#10;            applyDarkMode(isChecked);&#10;            showToast(isChecked ? &quot;Dark mode enabled&quot; : &quot;Light mode enabled&quot;);&#10;        });&#10;&#10;        // Animations&#10;        switchAnimations.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_ANIMATIONS, isChecked);&#10;            showToast(isChecked ? &quot;Animations enabled&quot; : &quot;Animations disabled&quot;);&#10;        });&#10;&#10;        // Notifications&#10;        MaterialCardView cardNotifications = findViewById(R.id.cardNotifications);&#10;        cardNotifications.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, NotificationsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Privacy&#10;        MaterialCardView cardPrivacy = findViewById(R.id.cardPrivacy);&#10;        cardPrivacy.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, PrivacyActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Help &amp; Support&#10;        MaterialCardView cardHelp = findViewById(R.id.cardHelp);&#10;        cardHelp.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, HelpActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void saveSetting(String key, boolean value) {&#10;        SharedPreferences.Editor editor = sharedPreferences.edit();&#10;        editor.putBoolean(key, value);&#10;        editor.apply();&#10;    }&#10;&#10;    private void applyDarkMode(boolean isDarkMode) {&#10;        if (isDarkMode) {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;        } else {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;        }&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    // Public method to get settings&#10;    public static boolean getSoundEffectsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_SOUND_EFFECTS, true);&#10;    }&#10;&#10;    public static boolean getBackgroundMusicSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_BACKGROUND_MUSIC, true);&#10;    }&#10;&#10;    public static boolean getVibrationSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    public static boolean getAnimationsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_ANIMATIONS, true);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;&#10;import com.example.tabletussle.managers.SoundManager;&#10;import com.example.tabletussle.managers.VibrationManager;&#10;import com.example.tabletussle.managers.AnimationManager;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.switchmaterial.SwitchMaterial;&#10;&#10;public class SettingsActivity extends AppCompatActivity {&#10;&#10;    private SharedPreferences sharedPreferences;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;&#10;    // Manager instances&#10;    private SoundManager soundManager;&#10;    private VibrationManager vibrationManager;&#10;    private AnimationManager animationManager;&#10;&#10;    // Settings keys&#10;    private static final String KEY_SOUND_EFFECTS = &quot;sound_effects&quot;;&#10;    private static final String KEY_BACKGROUND_MUSIC = &quot;background_music&quot;;&#10;    private static final String KEY_VIBRATION = &quot;vibration&quot;;&#10;    private static final String KEY_DARK_MODE = &quot;dark_mode&quot;;&#10;    private static final String KEY_ANIMATIONS = &quot;animations&quot;;&#10;&#10;    // UI Components&#10;    private SwitchMaterial switchSoundEffects;&#10;    private SwitchMaterial switchBackgroundMusic;&#10;    private SwitchMaterial switchVibration;&#10;    private SwitchMaterial switchDarkMode;&#10;    private SwitchMaterial switchAnimations;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_settings);&#10;&#10;        sharedPreferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;&#10;        // Initialize managers&#10;        soundManager = SoundManager.getInstance(this);&#10;        vibrationManager = VibrationManager.getInstance(this);&#10;        animationManager = AnimationManager.getInstance(this);&#10;&#10;        // Apply current dark mode setting before loading UI&#10;        boolean isDarkMode = sharedPreferences.getBoolean(KEY_DARK_MODE, true);&#10;        applyDarkMode(isDarkMode);&#10;&#10;        initializeViews();&#10;        loadSettings();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        // Back button&#10;        ImageButton btnBack = findViewById(R.id.btnBack);&#10;        btnBack.setOnClickListener(v -&gt; finish());&#10;&#10;        // Switches&#10;        switchSoundEffects = findViewById(R.id.switchSoundEffects);&#10;        switchBackgroundMusic = findViewById(R.id.switchBackgroundMusic);&#10;        switchVibration = findViewById(R.id.switchVibration);&#10;        switchDarkMode = findViewById(R.id.switchDarkMode);&#10;        switchAnimations = findViewById(R.id.switchAnimations);&#10;&#10;        // Set app version&#10;        TextView tvAppVersion = findViewById(R.id.tvAppVersion);&#10;        try {&#10;            String versionName = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;&#10;            tvAppVersion.setText(&quot;Version &quot; + versionName);&#10;        } catch (Exception e) {&#10;            tvAppVersion.setText(&quot;Version 1.0.0&quot;);&#10;        }&#10;    }&#10;&#10;    private void loadSettings() {&#10;        // Load saved preferences&#10;        switchSoundEffects.setChecked(sharedPreferences.getBoolean(KEY_SOUND_EFFECTS, true));&#10;        switchBackgroundMusic.setChecked(sharedPreferences.getBoolean(KEY_BACKGROUND_MUSIC, true));&#10;        switchVibration.setChecked(sharedPreferences.getBoolean(KEY_VIBRATION, true));&#10;        switchDarkMode.setChecked(sharedPreferences.getBoolean(KEY_DARK_MODE, true));&#10;        switchAnimations.setChecked(sharedPreferences.getBoolean(KEY_ANIMATIONS, true));&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Sound Effects&#10;        switchSoundEffects.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_SOUND_EFFECTS, isChecked);&#10;            soundManager.setSoundEffectsEnabled(isChecked);&#10;            if (isChecked) {&#10;                soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            }&#10;            showToast(isChecked ? &quot;Sound effects enabled&quot; : &quot;Sound effects disabled&quot;);&#10;        });&#10;&#10;        // Background Music&#10;        switchBackgroundMusic.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_BACKGROUND_MUSIC, isChecked);&#10;            soundManager.setBackgroundMusicEnabled(isChecked);&#10;            showToast(isChecked ? &quot;Background music enabled&quot; : &quot;Background music disabled&quot;);&#10;        });&#10;&#10;        // Vibration&#10;        switchVibration.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_VIBRATION, isChecked);&#10;            vibrationManager.setVibrationEnabled(isChecked);&#10;            if (isChecked) {&#10;                vibrationManager.vibrate(VibrationManager.VibrationType.MEDIUM);&#10;            }&#10;            showToast(isChecked ? &quot;Vibration enabled&quot; : &quot;Vibration disabled&quot;);&#10;        });&#10;&#10;        // Dark Mode&#10;        switchDarkMode.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_DARK_MODE, isChecked);&#10;            applyDarkMode(isChecked);&#10;            showToast(isChecked ? &quot;Dark mode enabled&quot; : &quot;Light mode enabled&quot;);&#10;        });&#10;&#10;        // Animations&#10;        switchAnimations.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_ANIMATIONS, isChecked);&#10;            animationManager.setAnimationsEnabled(isChecked);&#10;            showToast(isChecked ? &quot;Animations enabled&quot; : &quot;Animations disabled&quot;);&#10;        });&#10;&#10;        // Notifications&#10;        MaterialCardView cardNotifications = findViewById(R.id.cardNotifications);&#10;        cardNotifications.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, NotificationsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Privacy&#10;        MaterialCardView cardPrivacy = findViewById(R.id.cardPrivacy);&#10;        cardPrivacy.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, PrivacyActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Help &amp; Support&#10;        MaterialCardView cardHelp = findViewById(R.id.cardHelp);&#10;        cardHelp.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, HelpActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void saveSetting(String key, boolean value) {&#10;        SharedPreferences.Editor editor = sharedPreferences.edit();&#10;        editor.putBoolean(key, value);&#10;        editor.apply();&#10;    }&#10;&#10;    private void applyDarkMode(boolean isDarkMode) {&#10;        if (isDarkMode) {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;        } else {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;        }&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    // Public method to get settings&#10;    public static boolean getSoundEffectsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_SOUND_EFFECTS, true);&#10;    }&#10;&#10;    public static boolean getBackgroundMusicSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_BACKGROUND_MUSIC, true);&#10;    }&#10;&#10;    public static boolean getVibrationSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    public static boolean getAnimationsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_ANIMATIONS, true);&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/TableTussleApp.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/TableTussleApp.java" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.app.Application;&#10;import android.content.SharedPreferences;&#10;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;&#10;public class TableTussleApp extends Application {&#10;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;    private static final String KEY_DARK_MODE = &quot;dark_mode&quot;;&#10;&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        &#10;        // Apply dark mode setting before any activity is created&#10;        applyThemeFromPreferences();&#10;    }&#10;&#10;    private void applyThemeFromPreferences() {&#10;        SharedPreferences sharedPreferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        boolean isDarkMode = sharedPreferences.getBoolean(KEY_DARK_MODE, true);&#10;        &#10;        if (isDarkMode) {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;        } else {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/AnimationManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/AnimationManager.java" />
              <option name="updatedContent" value="package com.example.tabletussle.managers;&#10;&#10;import android.animation.Animator;&#10;import android.animation.AnimatorListenerAdapter;&#10;import android.animation.ObjectAnimator;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.view.View;&#10;import android.view.animation.AccelerateDecelerateInterpolator;&#10;import android.view.animation.BounceInterpolator;&#10;import android.view.animation.OvershootInterpolator;&#10;&#10;/**&#10; * Manages animations for UI elements&#10; */&#10;public class AnimationManager {&#10;    private static final String TAG = &quot;AnimationManager&quot;;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;    private static final String KEY_ANIMATIONS = &quot;animations&quot;;&#10;&#10;    private static AnimationManager instance;&#10;    private Context context;&#10;    private SharedPreferences sharedPreferences;&#10;    private boolean animationsEnabled;&#10;&#10;    private AnimationManager(Context context) {&#10;        this.context = context.getApplicationContext();&#10;        this.sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        &#10;        // Load preference&#10;        animationsEnabled = sharedPreferences.getBoolean(KEY_ANIMATIONS, true);&#10;    }&#10;&#10;    public static synchronized AnimationManager getInstance(Context context) {&#10;        if (instance == null) {&#10;            instance = new AnimationManager(context);&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Animate a button click&#10;     */&#10;    public void animateButtonClick(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        view.animate()&#10;                .scaleX(0.9f)&#10;                .scaleY(0.9f)&#10;                .setDuration(100)&#10;                .withEndAction(() -&gt; {&#10;                    view.animate()&#10;                            .scaleX(1.0f)&#10;                            .scaleY(1.0f)&#10;                            .setDuration(100)&#10;                            .start();&#10;                })&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Animate a cell being filled (for tic-tac-toe)&#10;     */&#10;    public void animateCellFill(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        view.setScaleX(0f);&#10;        view.setScaleY(0f);&#10;        view.animate()&#10;                .scaleX(1.0f)&#10;                .scaleY(1.0f)&#10;                .setDuration(200)&#10;                .setInterpolator(new OvershootInterpolator())&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Animate winning cells&#10;     */&#10;    public void animateWinningCells(View... views) {&#10;        if (!animationsEnabled || views == null) {&#10;            return;&#10;        }&#10;&#10;        for (View view : views) {&#10;            if (view != null) {&#10;                // Pulse animation&#10;                view.animate()&#10;                        .scaleX(1.2f)&#10;                        .scaleY(1.2f)&#10;                        .setDuration(300)&#10;                        .withEndAction(() -&gt; {&#10;                            view.animate()&#10;                                    .scaleX(1.0f)&#10;                                    .scaleY(1.0f)&#10;                                    .setDuration(300)&#10;                                    .start();&#10;                        })&#10;                        .start();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Shake animation for errors&#10;     */&#10;    public void animateShake(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        ObjectAnimator animator = ObjectAnimator.ofFloat(view, &quot;translationX&quot;, 0, 25, -25, 25, -25, 15, -15, 6, -6, 0);&#10;        animator.setDuration(500);&#10;        animator.start();&#10;    }&#10;&#10;    /**&#10;     * Fade in animation&#10;     */&#10;    public void animateFadeIn(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        view.setAlpha(0f);&#10;        view.setVisibility(View.VISIBLE);&#10;        view.animate()&#10;                .alpha(1.0f)&#10;                .setDuration(300)&#10;                .setListener(null)&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Fade out animation&#10;     */&#10;    public void animateFadeOut(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        view.animate()&#10;                .alpha(0f)&#10;                .setDuration(300)&#10;                .setListener(new AnimatorListenerAdapter() {&#10;                    @Override&#10;                    public void onAnimationEnd(Animator animation) {&#10;                        view.setVisibility(View.GONE);&#10;                    }&#10;                })&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Slide in from top&#10;     */&#10;    public void animateSlideInFromTop(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        view.setTranslationY(-view.getHeight());&#10;        view.setVisibility(View.VISIBLE);&#10;        view.animate()&#10;                .translationY(0)&#10;                .setDuration(400)&#10;                .setInterpolator(new AccelerateDecelerateInterpolator())&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Bounce animation&#10;     */&#10;    public void animateBounce(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        view.animate()&#10;                .scaleX(1.2f)&#10;                .scaleY(1.2f)&#10;                .setDuration(200)&#10;                .setInterpolator(new BounceInterpolator())&#10;                .withEndAction(() -&gt; {&#10;                    view.animate()&#10;                            .scaleX(1.0f)&#10;                            .scaleY(1.0f)&#10;                            .setDuration(200)&#10;                            .start();&#10;                })&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Rotate animation (for refresh/reset actions)&#10;     */&#10;    public void animateRotate(View view) {&#10;        if (!animationsEnabled || view == null) {&#10;            return;&#10;        }&#10;&#10;        view.animate()&#10;                .rotation(360f)&#10;                .setDuration(500)&#10;                .setInterpolator(new AccelerateDecelerateInterpolator())&#10;                .withEndAction(() -&gt; view.setRotation(0f))&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Update settings&#10;     */&#10;    public void updateSettings() {&#10;        animationsEnabled = sharedPreferences.getBoolean(KEY_ANIMATIONS, true);&#10;    }&#10;&#10;    /**&#10;     * Enable/disable animations&#10;     */&#10;    public void setAnimationsEnabled(boolean enabled) {&#10;        animationsEnabled = enabled;&#10;    }&#10;&#10;    /**&#10;     * Check if animations are enabled&#10;     */&#10;    public boolean areAnimationsEnabled() {&#10;        return animationsEnabled;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/SoundManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/SoundManager.java" />
              <option name="updatedContent" value="package com.example.tabletussle.managers;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.media.AudioAttributes;&#10;import android.media.MediaPlayer;&#10;import android.media.SoundPool;&#10;import android.util.Log;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Manages sound effects and background music for the game&#10; */&#10;public class SoundManager {&#10;    private static final String TAG = &quot;SoundManager&quot;;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;    private static final String KEY_SOUND_EFFECTS = &quot;sound_effects&quot;;&#10;    private static final String KEY_BACKGROUND_MUSIC = &quot;background_music&quot;;&#10;&#10;    private static SoundManager instance;&#10;    private Context context;&#10;    private SharedPreferences sharedPreferences;&#10;&#10;    private SoundPool soundPool;&#10;    private MediaPlayer backgroundMusicPlayer;&#10;    private Map&lt;String, Integer&gt; soundEffects;&#10;&#10;    private boolean soundEffectsEnabled;&#10;    private boolean backgroundMusicEnabled;&#10;&#10;    public enum SoundEffect {&#10;        CLICK,&#10;        MOVE,&#10;        WIN,&#10;        LOSE,&#10;        DRAW&#10;    }&#10;&#10;    private SoundManager(Context context) {&#10;        this.context = context.getApplicationContext();&#10;        this.sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        &#10;        // Load preferences&#10;        soundEffectsEnabled = sharedPreferences.getBoolean(KEY_SOUND_EFFECTS, true);&#10;        backgroundMusicEnabled = sharedPreferences.getBoolean(KEY_BACKGROUND_MUSIC, true);&#10;&#10;        initializeSoundPool();&#10;        loadSoundEffects();&#10;    }&#10;&#10;    public static synchronized SoundManager getInstance(Context context) {&#10;        if (instance == null) {&#10;            instance = new SoundManager(context);&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private void initializeSoundPool() {&#10;        AudioAttributes audioAttributes = new AudioAttributes.Builder()&#10;                .setUsage(AudioAttributes.USAGE_GAME)&#10;                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)&#10;                .build();&#10;&#10;        soundPool = new SoundPool.Builder()&#10;                .setMaxStreams(5)&#10;                .setAudioAttributes(audioAttributes)&#10;                .build();&#10;&#10;        soundEffects = new HashMap&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Load sound effects from raw resources&#10;     * Note: For this implementation, we'll use system sounds as placeholders&#10;     * You can replace these with actual sound files in res/raw/&#10;     */&#10;    private void loadSoundEffects() {&#10;        try {&#10;            // Since we don't have actual sound files, we'll use a simple beep sound&#10;            // generated programmatically or use notification sounds as placeholders&#10;            &#10;            // In a real implementation, you would do:&#10;            // soundEffects.put(&quot;CLICK&quot;, soundPool.load(context, R.raw.click_sound, 1));&#10;            // soundEffects.put(&quot;MOVE&quot;, soundPool.load(context, R.raw.move_sound, 1));&#10;            // etc.&#10;            &#10;            Log.d(TAG, &quot;Sound effects loaded (using system sounds)&quot;);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error loading sound effects: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Play a sound effect&#10;     */&#10;    public void playSound(SoundEffect effect) {&#10;        if (!soundEffectsEnabled) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Simple beep using ToneGenerator as placeholder&#10;            android.media.ToneGenerator toneGen = new android.media.ToneGenerator(&#10;                    android.media.AudioManager.STREAM_MUSIC, 50);&#10;            &#10;            switch (effect) {&#10;                case CLICK:&#10;                    toneGen.startTone(android.media.ToneGenerator.TONE_PROP_BEEP, 50);&#10;                    break;&#10;                case MOVE:&#10;                    toneGen.startTone(android.media.ToneGenerator.TONE_PROP_ACK, 100);&#10;                    break;&#10;                case WIN:&#10;                    toneGen.startTone(android.media.ToneGenerator.TONE_CDMA_ALERT_CALL_GUARD, 200);&#10;                    break;&#10;                case LOSE:&#10;                    toneGen.startTone(android.media.ToneGenerator.TONE_CDMA_ABBR_ALERT, 200);&#10;                    break;&#10;                case DRAW:&#10;                    toneGen.startTone(android.media.ToneGenerator.TONE_PROP_NACK, 150);&#10;                    break;&#10;            }&#10;&#10;            // Release tone generator after a delay&#10;            new android.os.Handler(android.os.Looper.getMainLooper()).postDelayed(&#10;                    toneGen::release, 300);&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error playing sound: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Start background music (simple implementation)&#10;     */&#10;    public void startBackgroundMusic() {&#10;        if (!backgroundMusicEnabled || backgroundMusicPlayer != null) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // For now, we'll skip background music as we don't have audio files&#10;            // In a real implementation:&#10;            // backgroundMusicPlayer = MediaPlayer.create(context, R.raw.background_music);&#10;            // backgroundMusicPlayer.setLooping(true);&#10;            // backgroundMusicPlayer.start();&#10;            &#10;            Log.d(TAG, &quot;Background music started (placeholder)&quot;);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error starting background music: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Stop background music&#10;     */&#10;    public void stopBackgroundMusic() {&#10;        if (backgroundMusicPlayer != null) {&#10;            try {&#10;                backgroundMusicPlayer.stop();&#10;                backgroundMusicPlayer.release();&#10;                backgroundMusicPlayer = null;&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error stopping background music: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Pause background music&#10;     */&#10;    public void pauseBackgroundMusic() {&#10;        if (backgroundMusicPlayer != null &amp;&amp; backgroundMusicPlayer.isPlaying()) {&#10;            backgroundMusicPlayer.pause();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Resume background music&#10;     */&#10;    public void resumeBackgroundMusic() {&#10;        if (backgroundMusicPlayer != null &amp;&amp; backgroundMusicEnabled) {&#10;            backgroundMusicPlayer.start();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update settings&#10;     */&#10;    public void updateSettings() {&#10;        soundEffectsEnabled = sharedPreferences.getBoolean(KEY_SOUND_EFFECTS, true);&#10;        backgroundMusicEnabled = sharedPreferences.getBoolean(KEY_BACKGROUND_MUSIC, true);&#10;&#10;        if (!backgroundMusicEnabled) {&#10;            stopBackgroundMusic();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Enable/disable sound effects&#10;     */&#10;    public void setSoundEffectsEnabled(boolean enabled) {&#10;        soundEffectsEnabled = enabled;&#10;    }&#10;&#10;    /**&#10;     * Enable/disable background music&#10;     */&#10;    public void setBackgroundMusicEnabled(boolean enabled) {&#10;        backgroundMusicEnabled = enabled;&#10;        if (!enabled) {&#10;            stopBackgroundMusic();&#10;        } else {&#10;            startBackgroundMusic();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Release all resources&#10;     */&#10;    public void release() {&#10;        if (soundPool != null) {&#10;            soundPool.release();&#10;            soundPool = null;&#10;        }&#10;        stopBackgroundMusic();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/VibrationManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/VibrationManager.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.tabletussle.managers;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.os.Build;&#10;import android.os.VibrationEffect;&#10;import android.os.Vibrator;&#10;import android.util.Log;&#10;&#10;/**&#10; * Manages haptic feedback (vibration) for the game&#10; */&#10;public class VibrationManager {&#10;    private static final String TAG = &quot;VibrationManager&quot;;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;    private static final String KEY_VIBRATION = &quot;vibration&quot;;&#10;&#10;    private static VibrationManager instance;&#10;    private Context context;&#10;    private SharedPreferences sharedPreferences;&#10;    private Vibrator vibrator;&#10;    private boolean vibrationEnabled;&#10;&#10;    public enum VibrationType {&#10;        LIGHT,    // Short tap (10ms)&#10;        MEDIUM,   // Button press (25ms)&#10;        HEAVY,    // Move made (50ms)&#10;        SUCCESS,  // Win (pattern)&#10;        ERROR     // Loss (pattern)&#10;    }&#10;&#10;    private VibrationManager(Context context) {&#10;        this.context = context.getApplicationContext();&#10;        this.sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        this.vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);&#10;&#10;        // Load preference&#10;        vibrationEnabled = sharedPreferences.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    public static synchronized VibrationManager getInstance(Context context) {&#10;        if (instance == null) {&#10;            instance = new VibrationManager(context);&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Vibrate with specified type&#10;     */&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    public void vibrate(VibrationType type) {&#10;        if (!vibrationEnabled || vibrator == null || !vibrator.hasVibrator()) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                // Modern API (Android 8.0+)&#10;                VibrationEffect effect = null;&#10;&#10;                switch (type) {&#10;                    case LIGHT:&#10;                        effect = VibrationEffect.createOneShot(10, VibrationEffect.DEFAULT_AMPLITUDE);&#10;                        break;&#10;                    case MEDIUM:&#10;                        effect = VibrationEffect.createOneShot(25, VibrationEffect.DEFAULT_AMPLITUDE);&#10;                        break;&#10;                    case HEAVY:&#10;                        effect = VibrationEffect.createOneShot(50, VibrationEffect.DEFAULT_AMPLITUDE);&#10;                        break;&#10;                    case SUCCESS:&#10;                        // Pattern: short, pause, short, pause, long&#10;                        long[] successPattern = {0, 50, 100, 50, 100, 200};&#10;                        effect = VibrationEffect.createWaveform(successPattern, -1);&#10;                        break;&#10;                    case ERROR:&#10;                        // Pattern: long, pause, long&#10;                        long[] errorPattern = {0, 100, 100, 100};&#10;                        effect = VibrationEffect.createWaveform(errorPattern, -1);&#10;                        break;&#10;                }&#10;&#10;                if (effect != null) {&#10;                    vibrator.vibrate(effect);&#10;                }&#10;            } else {&#10;                // Legacy API (Android 7.1 and below)&#10;                long duration;&#10;                switch (type) {&#10;                    case LIGHT:&#10;                        duration = 10;&#10;                        break;&#10;                    case MEDIUM:&#10;                        duration = 25;&#10;                        break;&#10;                    case HEAVY:&#10;                        duration = 50;&#10;                        break;&#10;                    case SUCCESS:&#10;                        long[] successPattern = {0, 50, 100, 50, 100, 200};&#10;                        vibrator.vibrate(successPattern, -1);&#10;                        return;&#10;                    case ERROR:&#10;                        long[] errorPattern = {0, 100, 100, 100};&#10;                        vibrator.vibrate(errorPattern, -1);&#10;                        return;&#10;                    default:&#10;                        duration = 25;&#10;                }&#10;                vibrator.vibrate(duration);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error vibrating: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update settings&#10;     */&#10;    public void updateSettings() {&#10;        vibrationEnabled = sharedPreferences.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    /**&#10;     * Enable/disable vibration&#10;     */&#10;    public void setVibrationEnabled(boolean enabled) {&#10;        vibrationEnabled = enabled;&#10;    }&#10;&#10;    /**&#10;     * Check if vibration is enabled&#10;     */&#10;    public boolean isVibrationEnabled() {&#10;        return vibrationEnabled;&#10;    }&#10;&#10;    /**&#10;     * Cancel any ongoing vibration&#10;     */&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    public void cancel() {&#10;        if (vibrator != null) {&#10;            vibrator.cancel();&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>