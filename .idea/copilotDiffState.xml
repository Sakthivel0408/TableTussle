<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# TableTussle - Tic Tac Toe Game&#10;&#10;A feature-rich Tic Tac Toe Android application with online multiplayer, AI opponents, statistics tracking, and complete audio experience.&#10;&#10;##  Features&#10;&#10;### Game Modes&#10;- **Single Player** - Play against AI with adjustable difficulty (Easy/Medium/Hard)&#10;- **Online Multiplayer** - Create or join rooms to play with friends&#10;- **Quick Match** - Fast random online matchmaking&#10;&#10;### Audio System&#10;- **Sound Effects** (80% volume)&#10;  - Button clicks&#10;  - Game moves&#10;  - Win/Lose/Draw notifications&#10;- **Background Music** (40% volume)&#10;  - Smooth, looping melody&#10;  - Auto pause/resume on app lifecycle&#10;  - Toggleable in settings&#10;&#10;### User Features&#10;- **Statistics Tracking** - Win/loss records, win rate, streaks&#10;- **QR Code Sharing** - Generate and scan QR codes for room joining&#10;- **Dark/Light Theme** - Complete theme support with smooth transitions&#10;- **Settings** - Control sound effects, background music, and theme&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;- Android Studio (latest version recommended)&#10;- Android SDK (minimum API 24)&#10;- Java JDK 11 or higher&#10;- Android device or emulator for testing&#10;&#10;### Build &amp; Install&#10;&#10;1. **Clone the repository** (or open the project in Android Studio)&#10;&#10;2. **Build the project:**&#10;   ```bash&#10;   cd /home/sakthivel-a/StudioProjects/TableTussle&#10;   ./gradlew clean assembleDebug&#10;   ```&#10;&#10;3. **Install on device:**&#10;   ```bash&#10;   adb install -r app/build/outputs/apk/debug/app-debug.apk&#10;   ```&#10;&#10;4. **Launch the app:**&#10;   ```bash&#10;   adb shell am start -n com.example.tabletussle/.LoginActivity&#10;   ```&#10;&#10;### Quick Build Commands&#10;&#10;```bash&#10;# Clean build&#10;./gradlew clean&#10;&#10;# Debug build&#10;./gradlew assembleDebug&#10;&#10;# Release build&#10;./gradlew assembleRelease&#10;&#10;# Install and run&#10;./gradlew installDebug&#10;adb shell am start -n com.example.tabletussle/.LoginActivity&#10;```&#10;&#10;##  How to Use&#10;&#10;### First Time Setup&#10;1. Launch the app&#10;2. Sign up with username and password&#10;3. Choose your game mode&#10;4. Start playing!&#10;&#10;### Single Player&#10;1. Click &quot;Play Now&quot;&#10;2. Select AI difficulty (Easy/Medium/Hard)&#10;3. Make your move - you're X, AI is O&#10;4. Try to get three in a row!&#10;&#10;### Online Multiplayer&#10;**Create Room:**&#10;1. Click &quot;Create Room&quot;&#10;2. Enter room name&#10;3. Share room code or QR code with friend&#10;4. Wait for opponent to join&#10;&#10;**Join Room:**&#10;1. Click &quot;Join Room&quot;&#10;2. Enter room code or scan QR code&#10;3. Wait for game to start&#10;&#10;### Quick Match&#10;1. Click &quot;Quick Match&quot;&#10;2. Wait for matchmaking&#10;3. Game starts automatically when opponent found&#10;&#10;##  Audio Features&#10;&#10;### Background Music&#10;- Custom background music file: `keys_of_moon_the_success.mp3`&#10;- Located in: `app/src/main/res/raw/`&#10;- Loops continuously during gameplay&#10;- Volume: 40% of maximum&#10;- Can be toggled ON/OFF in Settings&#10;&#10;### Changing Background Music&#10;To replace the background music:&#10;&#10;1. Find your MP3 file&#10;2. Rename it to follow Android resource naming rules:&#10;   - Only lowercase letters (a-z)&#10;   - Numbers (0-9)&#10;   - Underscores (_)&#10;   - No spaces, hyphens, or special characters&#10;   - Example: `my_custom_music.mp3`&#10;&#10;3. Place the file in: `app/src/main/res/raw/`&#10;&#10;4. Update `SoundManager.java`:&#10;   ```java&#10;   // Find this line (around line 120):&#10;   backgroundMusic = MediaPlayer.create(context, R.raw.keys_of_moon_the_success);&#10;   &#10;   // Change to your file:&#10;   backgroundMusic = MediaPlayer.create(context, R.raw.my_custom_music);&#10;   ```&#10;&#10;5. Rebuild the app&#10;&#10;### Sound Effects&#10;All sound effects use ToneGenerator for consistent, lightweight audio:&#10;- **Click:** Short beep for button presses&#10;- **Move:** Acknowledgment tone for game moves&#10;- **Win:** Victory fanfare&#10;- **Lose:** Defeat tone&#10;- **Draw:** Neutral tone&#10;&#10;##  Statistics&#10;&#10;Track your progress with comprehensive statistics:&#10;- **Games Played** - Total number of games&#10;- **Games Won** - Number of victories&#10;- **Win Rate** - Percentage of games won&#10;- **Current Streak** - Consecutive wins&#10;- **Best Streak** - Longest winning streak&#10;&#10;Statistics are stored locally using SQLite database and persist across app sessions.&#10;&#10;## ⚙️ Settings&#10;&#10;Access settings from the main menu:&#10;- **Sound Effects** - Toggle game sound effects ON/OFF&#10;- **Background Music** - Toggle background music ON/OFF&#10;- **Theme** - Switch between Dark and Light mode&#10;&#10;All settings are saved automatically and persist across app restarts.&#10;&#10;##  Themes&#10;&#10;### Light Theme&#10;- Clean, bright interface&#10;- Easy to read in daylight&#10;- Traditional color scheme&#10;&#10;### Dark Theme&#10;- Easy on the eyes in low light&#10;- AMOLED-friendly dark backgrounds&#10;- Reduced eye strain&#10;&#10;The app automatically applies the selected theme across all screens.&#10;&#10;##  Troubleshooting&#10;&#10;### Build Errors&#10;&#10;**Problem:** Resource naming errors&#10;```&#10;Error: '-' is not a valid file-based resource name character&#10;```&#10;**Solution:** Rename resource files to use only lowercase a-z, 0-9, or underscore.&#10;&#10;**Problem:** XML parsing errors&#10;**Solution:** Check XML files for unclosed tags or malformed structure.&#10;&#10;### Audio Issues&#10;&#10;**Problem:** No background music&#10;**Solutions:**&#10;1. Check Settings → Background Music is ON&#10;2. Increase device media volume&#10;3. Disable silent/vibrate mode&#10;4. Restart the app&#10;&#10;**Problem:** Music file not found&#10;**Solution:** Ensure the MP3 file is in `app/src/main/res/raw/` with valid filename.&#10;&#10;### Game Issues&#10;&#10;**Problem:** App crashes on &quot;Play Now&quot;&#10;**Solutions:**&#10;1. Check logcat for errors: `adb logcat | grep TableTussle`&#10;2. Clear app data and restart&#10;3. Reinstall the app&#10;&#10;**Problem:** Statistics not updating&#10;**Solutions:**&#10;1. Play a complete game (don't quit mid-game)&#10;2. Check database permissions&#10;3. Clear app data and replay&#10;&#10;##  Project Structure&#10;&#10;```&#10;TableTussle/&#10;├── app/&#10;│   ├── src/&#10;│   │   ├── main/&#10;│   │   │   ├── java/com/example/tabletussle/&#10;│   │   │   │   ├── LoginActivity.java&#10;│   │   │   │   ├── MainActivity.java&#10;│   │   │   │   ├── GameActivity.java&#10;│   │   │   │   ├── CreateRoomActivity.java&#10;│   │   │   │   ├── JoinRoomActivity.java&#10;│   │   │   │   ├── QuickMatchActivity.java&#10;│   │   │   │   ├── StatisticsActivity.java&#10;│   │   │   │   ├── SettingsActivity.java&#10;│   │   │   │   ├── SoundManager.java&#10;│   │   │   │   ├── ThemeManager.java&#10;│   │   │   │   └── DatabaseHelper.java&#10;│   │   │   ├── res/&#10;│   │   │   │   ├── layout/ - UI layouts&#10;│   │   │   │   ├── values/ - Strings, colors, themes&#10;│   │   │   │   ├── values-night/ - Dark theme resources&#10;│   │   │   │   ├── drawable/ - Icons and graphics&#10;│   │   │   │   └── raw/ - Audio files&#10;│   │   │   └── AndroidManifest.xml&#10;│   └── build.gradle.kts&#10;├── gradle/&#10;├── build.gradle.kts&#10;└── README.md&#10;```&#10;&#10;## ️ Technical Details&#10;&#10;### Technologies Used&#10;- **Language:** Java&#10;- **Database:** SQLite&#10;- **Audio:** MediaPlayer (music), ToneGenerator (SFX)&#10;- **QR Code:** ZXing library&#10;- **Network:** Firebase Realtime Database (for multiplayer)&#10;- **UI:** Material Design components&#10;&#10;### Minimum Requirements&#10;- Android 7.0 (API 24) or higher&#10;- 50 MB free storage&#10;- Internet connection (for multiplayer modes)&#10;&#10;### Permissions Required&#10;- `INTERNET` - For online multiplayer&#10;- `CAMERA` - For QR code scanning&#10;- `VIBRATE` - For haptic feedback&#10;&#10;##  Known Issues&#10;&#10;- None currently reported&#10;&#10;##  Development Notes&#10;&#10;### AI Difficulty Levels&#10;- **Easy:** Random moves with occasional mistakes&#10;- **Medium:** Basic strategy with some planning&#10;- **Hard:** Minimax algorithm, nearly unbeatable&#10;&#10;### Database Schema&#10;```sql&#10;CREATE TABLE users (&#10;    id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;    username TEXT UNIQUE,&#10;    password TEXT&#10;);&#10;&#10;CREATE TABLE statistics (&#10;    id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;    username TEXT,&#10;    games_played INTEGER,&#10;    games_won INTEGER,&#10;    win_rate REAL,&#10;    current_streak INTEGER,&#10;    best_streak INTEGER&#10;);&#10;```&#10;&#10;##  License&#10;&#10;This project is created for educational purposes.&#10;&#10;##  Author&#10;&#10;**Sakthivel0408**&#10;- Project: TableTussle&#10;- Date: October 2025&#10;&#10;##  Acknowledgments&#10;&#10;- ZXing library for QR code functionality&#10;- Material Design for UI components&#10;- Background music: &quot;Keys of Moon - The Success&quot; by Chosic&#10;&#10;##  Support&#10;&#10;For issues or questions:&#10;1. Check the Troubleshooting section above&#10;2. Review logcat output: `adb logcat | grep TableTussle`&#10;3. Clean and rebuild the project&#10;&#10;---&#10;&#10;**Enjoy playing TableTussle! **&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/SettingsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/SettingsActivity.java" />
              <option name="originalContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.switchmaterial.SwitchMaterial;&#10;&#10;public class SettingsActivity extends AppCompatActivity {&#10;&#10;    private SharedPreferences sharedPreferences;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;&#10;    // Settings keys&#10;    private static final String KEY_SOUND_EFFECTS = &quot;sound_effects&quot;;&#10;    private static final String KEY_BACKGROUND_MUSIC = &quot;background_music&quot;;&#10;    private static final String KEY_VIBRATION = &quot;vibration&quot;;&#10;    private static final String KEY_DARK_MODE = &quot;dark_mode&quot;;&#10;    private static final String KEY_ANIMATIONS = &quot;animations&quot;;&#10;&#10;    // UI Components&#10;    private SwitchMaterial switchSoundEffects;&#10;    private SwitchMaterial switchBackgroundMusic;&#10;    private SwitchMaterial switchVibration;&#10;    private SwitchMaterial switchDarkMode;&#10;    private SwitchMaterial switchAnimations;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_settings);&#10;&#10;        sharedPreferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;&#10;        initializeViews();&#10;        loadSettings();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        // Back button&#10;        ImageButton btnBack = findViewById(R.id.btnBack);&#10;        btnBack.setOnClickListener(v -&gt; finish());&#10;&#10;        // Switches&#10;        switchSoundEffects = findViewById(R.id.switchSoundEffects);&#10;        switchBackgroundMusic = findViewById(R.id.switchBackgroundMusic);&#10;        switchVibration = findViewById(R.id.switchVibration);&#10;        switchDarkMode = findViewById(R.id.switchDarkMode);&#10;        switchAnimations = findViewById(R.id.switchAnimations);&#10;&#10;        // Set app version&#10;        TextView tvAppVersion = findViewById(R.id.tvAppVersion);&#10;        try {&#10;            String versionName = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;&#10;            tvAppVersion.setText(&quot;Version &quot; + versionName);&#10;        } catch (Exception e) {&#10;            tvAppVersion.setText(&quot;Version 1.0.0&quot;);&#10;        }&#10;    }&#10;&#10;    private void loadSettings() {&#10;        // Load saved preferences&#10;        switchSoundEffects.setChecked(sharedPreferences.getBoolean(KEY_SOUND_EFFECTS, true));&#10;        switchBackgroundMusic.setChecked(sharedPreferences.getBoolean(KEY_BACKGROUND_MUSIC, true));&#10;        switchVibration.setChecked(sharedPreferences.getBoolean(KEY_VIBRATION, true));&#10;        switchDarkMode.setChecked(sharedPreferences.getBoolean(KEY_DARK_MODE, true));&#10;        switchAnimations.setChecked(sharedPreferences.getBoolean(KEY_ANIMATIONS, true));&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Sound Effects&#10;        switchSoundEffects.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_SOUND_EFFECTS, isChecked);&#10;            showToast(isChecked ? &quot;Sound effects enabled&quot; : &quot;Sound effects disabled&quot;);&#10;        });&#10;&#10;        // Background Music&#10;        switchBackgroundMusic.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_BACKGROUND_MUSIC, isChecked);&#10;            showToast(isChecked ? &quot;Background music enabled&quot; : &quot;Background music disabled&quot;);&#10;        });&#10;&#10;        // Vibration&#10;        switchVibration.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_VIBRATION, isChecked);&#10;            showToast(isChecked ? &quot;Vibration enabled&quot; : &quot;Vibration disabled&quot;);&#10;        });&#10;&#10;        // Dark Mode&#10;        switchDarkMode.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_DARK_MODE, isChecked);&#10;            applyDarkMode(isChecked);&#10;            showToast(isChecked ? &quot;Dark mode enabled&quot; : &quot;Light mode enabled&quot;);&#10;        });&#10;&#10;        // Animations&#10;        switchAnimations.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_ANIMATIONS, isChecked);&#10;            showToast(isChecked ? &quot;Animations enabled&quot; : &quot;Animations disabled&quot;);&#10;        });&#10;&#10;        // Notifications&#10;        MaterialCardView cardNotifications = findViewById(R.id.cardNotifications);&#10;        cardNotifications.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, NotificationsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Privacy&#10;        MaterialCardView cardPrivacy = findViewById(R.id.cardPrivacy);&#10;        cardPrivacy.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, PrivacyActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Help &amp; Support&#10;        MaterialCardView cardHelp = findViewById(R.id.cardHelp);&#10;        cardHelp.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, HelpActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void saveSetting(String key, boolean value) {&#10;        SharedPreferences.Editor editor = sharedPreferences.edit();&#10;        editor.putBoolean(key, value);&#10;        editor.apply();&#10;    }&#10;&#10;    private void applyDarkMode(boolean isDarkMode) {&#10;        if (isDarkMode) {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;        } else {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;        }&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    // Public method to get settings&#10;    public static boolean getSoundEffectsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_SOUND_EFFECTS, true);&#10;    }&#10;&#10;    public static boolean getBackgroundMusicSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_BACKGROUND_MUSIC, true);&#10;    }&#10;&#10;    public static boolean getVibrationSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    public static boolean getAnimationsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_ANIMATIONS, true);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;&#10;import com.example.tabletussle.managers.SoundManager;&#10;import com.example.tabletussle.managers.VibrationManager;&#10;import com.example.tabletussle.managers.AnimationManager;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.switchmaterial.SwitchMaterial;&#10;&#10;public class SettingsActivity extends AppCompatActivity {&#10;&#10;    private SharedPreferences sharedPreferences;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;&#10;    // Manager instances&#10;    private SoundManager soundManager;&#10;    private VibrationManager vibrationManager;&#10;    private AnimationManager animationManager;&#10;&#10;    // Settings keys&#10;    private static final String KEY_SOUND_EFFECTS = &quot;sound_effects&quot;;&#10;    private static final String KEY_BACKGROUND_MUSIC = &quot;background_music&quot;;&#10;    private static final String KEY_VIBRATION = &quot;vibration&quot;;&#10;    private static final String KEY_DARK_MODE = &quot;dark_mode&quot;;&#10;    private static final String KEY_ANIMATIONS = &quot;animations&quot;;&#10;&#10;    // UI Components&#10;    private SwitchMaterial switchSoundEffects;&#10;    private SwitchMaterial switchBackgroundMusic;&#10;    private SwitchMaterial switchVibration;&#10;    private SwitchMaterial switchDarkMode;&#10;    private SwitchMaterial switchAnimations;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_settings);&#10;&#10;        sharedPreferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;&#10;        // Initialize managers&#10;        soundManager = SoundManager.getInstance(this);&#10;        vibrationManager = VibrationManager.getInstance(this);&#10;        animationManager = AnimationManager.getInstance(this);&#10;&#10;        // Apply current dark mode setting before loading UI&#10;        boolean isDarkMode = sharedPreferences.getBoolean(KEY_DARK_MODE, true);&#10;        applyDarkMode(isDarkMode);&#10;&#10;        initializeViews();&#10;        loadSettings();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        // Back button&#10;        ImageButton btnBack = findViewById(R.id.btnBack);&#10;        btnBack.setOnClickListener(v -&gt; finish());&#10;&#10;        // Switches&#10;        switchSoundEffects = findViewById(R.id.switchSoundEffects);&#10;        switchBackgroundMusic = findViewById(R.id.switchBackgroundMusic);&#10;        switchVibration = findViewById(R.id.switchVibration);&#10;        switchDarkMode = findViewById(R.id.switchDarkMode);&#10;        switchAnimations = findViewById(R.id.switchAnimations);&#10;&#10;        // Set app version&#10;        TextView tvAppVersion = findViewById(R.id.tvAppVersion);&#10;        try {&#10;            String versionName = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;&#10;            tvAppVersion.setText(&quot;Version &quot; + versionName);&#10;        } catch (Exception e) {&#10;            tvAppVersion.setText(&quot;Version 1.0.0&quot;);&#10;        }&#10;    }&#10;&#10;    private void loadSettings() {&#10;        // Load saved preferences&#10;        switchSoundEffects.setChecked(sharedPreferences.getBoolean(KEY_SOUND_EFFECTS, true));&#10;        switchBackgroundMusic.setChecked(sharedPreferences.getBoolean(KEY_BACKGROUND_MUSIC, true));&#10;        switchVibration.setChecked(sharedPreferences.getBoolean(KEY_VIBRATION, true));&#10;        switchDarkMode.setChecked(sharedPreferences.getBoolean(KEY_DARK_MODE, true));&#10;        switchAnimations.setChecked(sharedPreferences.getBoolean(KEY_ANIMATIONS, true));&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Sound Effects&#10;        switchSoundEffects.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_SOUND_EFFECTS, isChecked);&#10;            soundManager.setSoundEffectsEnabled(isChecked);&#10;            if (isChecked) {&#10;                soundManager.playSound(SoundManager.SoundEffect.CLICK);&#10;            }&#10;            showToast(isChecked ? &quot;Sound effects enabled&quot; : &quot;Sound effects disabled&quot;);&#10;        });&#10;&#10;        // Background Music&#10;        switchBackgroundMusic.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_BACKGROUND_MUSIC, isChecked);&#10;            soundManager.setBackgroundMusicEnabled(isChecked);&#10;            showToast(isChecked ? &quot;Background music enabled&quot; : &quot;Background music disabled&quot;);&#10;        });&#10;&#10;        // Vibration&#10;        switchVibration.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_VIBRATION, isChecked);&#10;            vibrationManager.setVibrationEnabled(isChecked);&#10;            if (isChecked) {&#10;                vibrationManager.vibrate(VibrationManager.VibrationType.MEDIUM);&#10;            }&#10;            showToast(isChecked ? &quot;Vibration enabled&quot; : &quot;Vibration disabled&quot;);&#10;        });&#10;&#10;        // Dark Mode&#10;        switchDarkMode.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_DARK_MODE, isChecked);&#10;            applyDarkMode(isChecked);&#10;            showToast(isChecked ? &quot;Dark mode enabled&quot; : &quot;Light mode enabled&quot;);&#10;        });&#10;&#10;        // Animations&#10;        switchAnimations.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            saveSetting(KEY_ANIMATIONS, isChecked);&#10;            animationManager.setAnimationsEnabled(isChecked);&#10;            showToast(isChecked ? &quot;Animations enabled&quot; : &quot;Animations disabled&quot;);&#10;        });&#10;&#10;        // Notifications&#10;        MaterialCardView cardNotifications = findViewById(R.id.cardNotifications);&#10;        cardNotifications.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, NotificationsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Privacy&#10;        MaterialCardView cardPrivacy = findViewById(R.id.cardPrivacy);&#10;        cardPrivacy.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, PrivacyActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Help &amp; Support&#10;        MaterialCardView cardHelp = findViewById(R.id.cardHelp);&#10;        cardHelp.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(SettingsActivity.this, HelpActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void saveSetting(String key, boolean value) {&#10;        SharedPreferences.Editor editor = sharedPreferences.edit();&#10;        editor.putBoolean(key, value);&#10;        editor.apply();&#10;    }&#10;&#10;    private void applyDarkMode(boolean isDarkMode) {&#10;        if (isDarkMode) {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;        } else {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;        }&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    // Public method to get settings&#10;    public static boolean getSoundEffectsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_SOUND_EFFECTS, true);&#10;    }&#10;&#10;    public static boolean getBackgroundMusicSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_BACKGROUND_MUSIC, true);&#10;    }&#10;&#10;    public static boolean getVibrationSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    public static boolean getAnimationsSetting(android.content.Context context) {&#10;        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        return prefs.getBoolean(KEY_ANIMATIONS, true);&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/TableTussleApp.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/TableTussleApp.java" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.app.Application;&#10;import android.content.SharedPreferences;&#10;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;&#10;public class TableTussleApp extends Application {&#10;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;    private static final String KEY_DARK_MODE = &quot;dark_mode&quot;;&#10;&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        &#10;        // Apply dark mode setting before any activity is created&#10;        applyThemeFromPreferences();&#10;    }&#10;&#10;    private void applyThemeFromPreferences() {&#10;        SharedPreferences sharedPreferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);&#10;        boolean isDarkMode = sharedPreferences.getBoolean(KEY_DARK_MODE, true);&#10;        &#10;        if (isDarkMode) {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;        } else {&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/VibrationManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/managers/VibrationManager.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.tabletussle.managers;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.os.Build;&#10;import android.os.VibrationEffect;&#10;import android.os.Vibrator;&#10;import android.util.Log;&#10;&#10;/**&#10; * Manages haptic feedback (vibration) for the game&#10; */&#10;public class VibrationManager {&#10;    private static final String TAG = &quot;VibrationManager&quot;;&#10;    private static final String PREFS_NAME = &quot;TableTussleSettings&quot;;&#10;    private static final String KEY_VIBRATION = &quot;vibration&quot;;&#10;&#10;    private static VibrationManager instance;&#10;    private Context context;&#10;    private SharedPreferences sharedPreferences;&#10;    private Vibrator vibrator;&#10;    private boolean vibrationEnabled;&#10;&#10;    public enum VibrationType {&#10;        LIGHT,    // Short tap (10ms)&#10;        MEDIUM,   // Button press (25ms)&#10;        HEAVY,    // Move made (50ms)&#10;        SUCCESS,  // Win (pattern)&#10;        ERROR     // Loss (pattern)&#10;    }&#10;&#10;    private VibrationManager(Context context) {&#10;        this.context = context.getApplicationContext();&#10;        this.sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);&#10;        this.vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);&#10;&#10;        // Load preference&#10;        vibrationEnabled = sharedPreferences.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    public static synchronized VibrationManager getInstance(Context context) {&#10;        if (instance == null) {&#10;            instance = new VibrationManager(context);&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Vibrate with specified type&#10;     */&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    public void vibrate(VibrationType type) {&#10;        if (!vibrationEnabled || vibrator == null || !vibrator.hasVibrator()) {&#10;            return;&#10;        }&#10;&#10;        try {&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                // Modern API (Android 8.0+)&#10;                VibrationEffect effect = null;&#10;&#10;                switch (type) {&#10;                    case LIGHT:&#10;                        effect = VibrationEffect.createOneShot(10, VibrationEffect.DEFAULT_AMPLITUDE);&#10;                        break;&#10;                    case MEDIUM:&#10;                        effect = VibrationEffect.createOneShot(25, VibrationEffect.DEFAULT_AMPLITUDE);&#10;                        break;&#10;                    case HEAVY:&#10;                        effect = VibrationEffect.createOneShot(50, VibrationEffect.DEFAULT_AMPLITUDE);&#10;                        break;&#10;                    case SUCCESS:&#10;                        // Pattern: short, pause, short, pause, long&#10;                        long[] successPattern = {0, 50, 100, 50, 100, 200};&#10;                        effect = VibrationEffect.createWaveform(successPattern, -1);&#10;                        break;&#10;                    case ERROR:&#10;                        // Pattern: long, pause, long&#10;                        long[] errorPattern = {0, 100, 100, 100};&#10;                        effect = VibrationEffect.createWaveform(errorPattern, -1);&#10;                        break;&#10;                }&#10;&#10;                if (effect != null) {&#10;                    vibrator.vibrate(effect);&#10;                }&#10;            } else {&#10;                // Legacy API (Android 7.1 and below)&#10;                long duration;&#10;                switch (type) {&#10;                    case LIGHT:&#10;                        duration = 10;&#10;                        break;&#10;                    case MEDIUM:&#10;                        duration = 25;&#10;                        break;&#10;                    case HEAVY:&#10;                        duration = 50;&#10;                        break;&#10;                    case SUCCESS:&#10;                        long[] successPattern = {0, 50, 100, 50, 100, 200};&#10;                        vibrator.vibrate(successPattern, -1);&#10;                        return;&#10;                    case ERROR:&#10;                        long[] errorPattern = {0, 100, 100, 100};&#10;                        vibrator.vibrate(errorPattern, -1);&#10;                        return;&#10;                    default:&#10;                        duration = 25;&#10;                }&#10;                vibrator.vibrate(duration);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error vibrating: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update settings&#10;     */&#10;    public void updateSettings() {&#10;        vibrationEnabled = sharedPreferences.getBoolean(KEY_VIBRATION, true);&#10;    }&#10;&#10;    /**&#10;     * Enable/disable vibration&#10;     */&#10;    public void setVibrationEnabled(boolean enabled) {&#10;        vibrationEnabled = enabled;&#10;    }&#10;&#10;    /**&#10;     * Check if vibration is enabled&#10;     */&#10;    public boolean isVibrationEnabled() {&#10;        return vibrationEnabled;&#10;    }&#10;&#10;    /**&#10;     * Cancel any ongoing vibration&#10;     */&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    public void cancel() {&#10;        if (vibrator != null) {&#10;            vibrator.cancel();&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/cleanup_docs.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/cleanup_docs.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;import os&#10;&#10;# Navigate to project directory&#10;project_dir = &quot;/home/sakthivel-a/StudioProjects/TableTussle&quot;&#10;os.chdir(project_dir)&#10;&#10;# List of files to remove&#10;files_to_remove = [&#10;    &quot;AI_DIFFICULTY_UPDATE.md&quot;,&#10;    &quot;BACKGROUND_MUSIC_FINAL.md&quot;,&#10;    &quot;BACKGROUND_MUSIC_WORKING.md&quot;,&#10;    &quot;BUILD_FIX_NOTES.md&quot;,&#10;    &quot;COMPLETE_THEME_FIX.md&quot;,&#10;    &quot;DARK_MODE_DEFAULT_FIX.md&quot;,&#10;    &quot;DARK_THEME_FIX.md&quot;,&#10;    &quot;DATABASE_README.md&quot;,&#10;    &quot;DEBUGGING_STATS_ISSUE.md&quot;,&#10;    &quot;GAME_ARCHITECTURE_DIAGRAM.md&quot;,&#10;    &quot;GAME_IMPLEMENTATION_README.md&quot;,&#10;    &quot;GAME_LOGIC_README.md&quot;,&#10;    &quot;GAME_STATISTICS_IMPLEMENTATION.md&quot;,&#10;    &quot;IMPLEMENTATION_COMPLETE.md&quot;,&#10;    &quot;QR_CODE_IMPLEMENTATION.md&quot;,&#10;    &quot;QUICK_START_GUIDE.md&quot;,&#10;    &quot;SETTINGS_FEATURES_IMPLEMENTATION.md&quot;,&#10;    &quot;SOUND_COMPLETE_FIX_REPORT.md&quot;,&#10;    &quot;SOUND_FINAL_CHECKLIST.md&quot;,&#10;    &quot;SOUND_FIX_QUICK_REFERENCE.md&quot;,&#10;    &quot;SOUND_FIX_SUMMARY.md&quot;,&#10;    &quot;SOUND_TESTING_GUIDE.md&quot;,&#10;    &quot;STATS_DEBUG_ENHANCED.md&quot;,&#10;    &quot;STATS_FIX_FINAL.md&quot;,&#10;    &quot;TESTING_GUIDE.md&quot;,&#10;    &quot;THEME_FIX_SUMMARY.md&quot;,&#10;    &quot;TODO_IMPLEMENTATION_SUMMARY.md&quot;,&#10;]&#10;&#10;removed_count = 0&#10;not_found_count = 0&#10;&#10;print(&quot;Removing old documentation files...&quot;)&#10;print(&quot;-&quot; * 50)&#10;&#10;for filename in files_to_remove:&#10;    filepath = os.path.join(project_dir, filename)&#10;    if os.path.exists(filepath):&#10;        try:&#10;            os.remove(filepath)&#10;            print(f&quot;✓ Removed: {filename}&quot;)&#10;            removed_count += 1&#10;        except Exception as e:&#10;            print(f&quot;✗ Error removing {filename}: {e}&quot;)&#10;    else:&#10;        not_found_count += 1&#10;&#10;print(&quot;-&quot; * 50)&#10;print(f&quot;\nSummary:&quot;)&#10;print(f&quot;  Removed: {removed_count} files&quot;)&#10;print(f&quot;  Not found: {not_found_count} files&quot;)&#10;print(f&quot;\n✓ Cleanup complete!&quot;)&#10;print(f&quot;✓ README.md created with comprehensive documentation&quot;)&#10;print(f&quot;\nTo verify, run: ls -la *.md&quot;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/cleanup_docs.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/cleanup_docs.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;# Cleanup script to remove old documentation files&#10;&#10;cd /home/sakthivel-a/StudioProjects/TableTussle&#10;&#10;# Remove all old markdown files (keeping only README.md)&#10;rm -f AI_DIFFICULTY_UPDATE.md&#10;rm -f BACKGROUND_MUSIC_FINAL.md&#10;rm -f BACKGROUND_MUSIC_WORKING.md&#10;rm -f BUILD_FIX_NOTES.md&#10;rm -f COMPLETE_THEME_FIX.md&#10;rm -f DARK_MODE_DEFAULT_FIX.md&#10;rm -f DARK_THEME_FIX.md&#10;rm -f DATABASE_README.md&#10;rm -f DEBUGGING_STATS_ISSUE.md&#10;rm -f GAME_ARCHITECTURE_DIAGRAM.md&#10;rm -f GAME_IMPLEMENTATION_README.md&#10;rm -f GAME_LOGIC_README.md&#10;rm -f GAME_STATISTICS_IMPLEMENTATION.md&#10;rm -f IMPLEMENTATION_COMPLETE.md&#10;rm -f QR_CODE_IMPLEMENTATION.md&#10;rm -f QUICK_START_GUIDE.md&#10;rm -f SETTINGS_FEATURES_IMPLEMENTATION.md&#10;rm -f SOUND_COMPLETE_FIX_REPORT.md&#10;rm -f SOUND_FINAL_CHECKLIST.md&#10;rm -f SOUND_FIX_QUICK_REFERENCE.md&#10;rm -f SOUND_FIX_SUMMARY.md&#10;rm -f SOUND_TESTING_GUIDE.md&#10;rm -f STATS_DEBUG_ENHANCED.md&#10;rm -f STATS_FIX_FINAL.md&#10;rm -f TESTING_GUIDE.md&#10;rm -f THEME_FIX_SUMMARY.md&#10;rm -f TODO_IMPLEMENTATION_SUMMARY.md&#10;&#10;echo &quot;Cleanup complete! Only README.md remains.&quot;&#10;echo &quot;&quot;&#10;echo &quot;Deleted files:&quot;&#10;echo &quot;- All implementation documentation&quot;&#10;echo &quot;- All fix reports&quot;&#10;echo &quot;- All testing guides&quot;&#10;echo &quot;- All debug documentation&quot;&#10;echo &quot;&quot;&#10;echo &quot;Kept files:&quot;&#10;echo &quot;✓ README.md (comprehensive project documentation)&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>