<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/DEBUGGING_STATS_ISSUE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DEBUGGING_STATS_ISSUE.md" />
              <option name="updatedContent" value="#  Debugging Guide: Games Won &amp; Win Rate Showing Zero&#10;&#10;## Problem&#10;Games Played is updating correctly, but **Games Won** and **Win Rate** remain at 0 even after winning games.&#10;&#10;---&#10;&#10;## ✅ Fixes Applied&#10;&#10;### 1. **StatisticsActivity - Data Refresh**&#10;**Problem**: Data was only loaded on activity creation, not when returning from game.&#10;&#10;**Fix Applied**:&#10;```java&#10;@Override&#10;protected void onResume() {&#10;    super.onResume();&#10;    // Reload user data when activity resumes (e.g., returning from game)&#10;    loadUserData();&#10;}&#10;```&#10;&#10;**Benefit**: Statistics now refresh every time you open the Statistics screen.&#10;&#10;### 2. **Thread Safety for Data Loading**&#10;**Problem**: Database queries running on main thread.&#10;&#10;**Fix Applied**:&#10;```java&#10;private void loadUserData() {&#10;    new Thread(() -&gt; {&#10;        User user = userDao.getUserById(userId);&#10;        runOnUiThread(() -&gt; {&#10;            // Update UI with fresh data&#10;        });&#10;    }).start();&#10;}&#10;```&#10;&#10;**Benefit**: No UI blocking, fresh data from database.&#10;&#10;### 3. **Enhanced Logging**&#10;**Problem**: No visibility into whether database updates were working.&#10;&#10;**Fix Applied**:&#10;```java&#10;android.util.Log.d(&quot;GameStats&quot;, &quot;Incremented games won for user &quot; + userId);&#10;android.util.Log.d(&quot;GameStats&quot;, &quot;Updated stats - Games: &quot; + games + &quot;, Wins: &quot; + wins);&#10;```&#10;&#10;**Benefit**: Can now see exactly what's happening in Logcat.&#10;&#10;---&#10;&#10;##  Testing Steps&#10;&#10;### Step 1: Clear App Data (Fresh Start)&#10;```bash&#10;# In Android Studio or via ADB:&#10;Settings → Apps → TableTussle → Storage → Clear Data&#10;```&#10;This ensures you're testing with a clean slate.&#10;&#10;### Step 2: Register New Account&#10;1. Open app&#10;2. Click &quot;Register&quot;&#10;3. Create account: `test@test.com` / `password123`&#10;4. Login successful&#10;&#10;### Step 3: Play and WIN a Game&#10;1. Click &quot;Play Now&quot;&#10;2. **IMPORTANT**: You must WIN the game (beat the AI)&#10;3. Watch for toast: &quot;Stats updated: Win (+10 pts)&quot;&#10;4. Click &quot;Play Again&quot; if you want to play more rounds&#10;5. When done, click Menu → Quit&#10;&#10;### Step 4: Check Logcat&#10;Open Logcat and filter by &quot;GameStats&quot;:&#10;```&#10;GameStats: Incremented games played for user 1&#10;GameStats: Incremented games won for user 1&#10;GameStats: Added 10 points for user 1&#10;GameStats: Updated stats - Games: 1, Wins: 1, Score: 10&#10;```&#10;&#10;### Step 5: Verify in Statistics&#10;1. Go back to Main Menu&#10;2. Click &quot;Statistics&quot;&#10;3. Check the displayed values:&#10;   - **Games Played**: Should be &gt; 0&#10;   - **Games Won**: Should match number of wins&#10;   - **Win Rate**: Should be (Wins/Games) × 100%&#10;   - **Total Score**: Should show accumulated points&#10;&#10;---&#10;&#10;##  Common Issues &amp; Solutions&#10;&#10;### Issue 1: &quot;Games Won Still Shows 0&quot;&#10;&#10;**Possible Causes**:&#10;1. ❌ You're playing but LOSING to the AI&#10;2. ❌ You're getting DRAWS (no winner)&#10;3. ❌ Database not updating due to guest mode&#10;&#10;**Solutions**:&#10;✅ **Make sure you WIN the game**&#10;   - Get 3 X's in a row before AI gets 3 O's&#10;   - Dialog should say &quot;You Win! &quot;&#10;&#10;✅ **Check you're logged in**&#10;   - Guest users don't save stats&#10;   - Verify you see your username at top&#10;&#10;✅ **Check Logcat for errors**&#10;   - Filter by &quot;GameStats&quot;&#10;   - Look for &quot;Incremented games won&quot; message&#10;&#10;### Issue 2: &quot;Statistics Don't Update Immediately&quot;&#10;&#10;**Cause**: Background thread delay&#10;&#10;**Solution**:&#10;✅ Wait 1-2 seconds after game ends&#10;✅ Or close and reopen Statistics screen (triggers onResume)&#10;&#10;### Issue 3: &quot;All Stats Show 0&quot;&#10;&#10;**Cause**: Guest mode or not logged in&#10;&#10;**Solution**:&#10;✅ Logout and login again&#10;✅ Register new account&#10;✅ Check UserSession.getUserId() returns valid ID&#10;&#10;---&#10;&#10;##  Database Verification&#10;&#10;### Option 1: Using Android Studio Database Inspector&#10;1. Run app on emulator/device&#10;2. View → Tool Windows → App Inspection&#10;3. Select &quot;TableTussle&quot; app&#10;4. Click &quot;Database Inspector&quot;&#10;5. Open &quot;app-database&quot;&#10;6. View &quot;users&quot; table&#10;7. Check values for gamesPlayed, gamesWon, totalScore&#10;&#10;### Option 2: Using ADB Shell&#10;```bash&#10;# Access device shell&#10;adb shell&#10;&#10;# Navigate to app directory&#10;cd /data/data/com.example.tabletussle/databases/&#10;&#10;# Open database&#10;sqlite3 app-database&#10;&#10;# Query user stats&#10;SELECT id, username, gamesPlayed, gamesWon, totalScore FROM users;&#10;&#10;# Exit&#10;.exit&#10;```&#10;&#10;---&#10;&#10;##  Advanced Debugging&#10;&#10;### Add Temporary Debug Button&#10;&#10;Add this to GameActivity to manually test database:&#10;&#10;```java&#10;// In onCreate(), add a debug button&#10;Button btnDebug = new Button(this);&#10;btnDebug.setText(&quot;DEBUG: Test Stats&quot;);&#10;btnDebug.setOnClickListener(v -&gt; {&#10;    int userId = userSession.getUserId();&#10;    new Thread(() -&gt; {&#10;        userDao.incrementGamesPlayed(userId);&#10;        userDao.incrementGamesWon(userId);&#10;        userDao.addScore(userId, 10);&#10;        &#10;        User user = userDao.getUserById(userId);&#10;        runOnUiThread(() -&gt; {&#10;            Toast.makeText(this, &#10;                &quot;Games: &quot; + user.getGamesPlayed() + &#10;                &quot;, Wins: &quot; + user.getGamesWon() + &#10;                &quot;, Score: &quot; + user.getTotalScore(), &#10;                Toast.LENGTH_LONG).show();&#10;        });&#10;    }).start();&#10;});&#10;```&#10;&#10;Click the button and verify stats increase.&#10;&#10;---&#10;&#10;## ✅ Verification Checklist&#10;&#10;Before reporting the issue isn't fixed, verify:&#10;&#10;- [ ] You're logged in (not guest)&#10;- [ ] You actually WON a game (not lost or draw)&#10;- [ ] Toast notification appeared: &quot;Stats updated: Win (+10 pts)&quot;&#10;- [ ] Logcat shows &quot;Incremented games won&quot; message&#10;- [ ] You refreshed Statistics screen (closed and reopened it)&#10;- [ ] You checked Database Inspector shows correct values&#10;- [ ] You played multiple games to see if counter increases&#10;&#10;---&#10;&#10;##  Expected Behavior&#10;&#10;### After Playing 3 Games (2 Wins, 1 Loss):&#10;&#10;**Statistics Screen Should Show**:&#10;```&#10;Games Played: 3&#10;Games Won: 2&#10;Win Rate: 66.7%&#10;Total Score: 20&#10;```&#10;&#10;**Database Should Show**:&#10;```sql&#10;gamesPlayed: 3&#10;gamesWon: 2&#10;totalScore: 20&#10;```&#10;&#10;**Logcat Should Show**:&#10;```&#10;GameStats: Updated stats - Games: 1, Wins: 1, Score: 10&#10;GameStats: Updated stats - Games: 2, Wins: 1, Score: 10  (after loss)&#10;GameStats: Updated stats - Games: 3, Wins: 2, Score: 20&#10;```&#10;&#10;---&#10;&#10;##  If Still Not Working&#10;&#10;### Check These:&#10;&#10;1. **Room Database Version**&#10;   - If you updated the database schema, increment version number&#10;   - Or clear app data to recreate database&#10;&#10;2. **User ID Consistency**&#10;   - Print userId in both GameActivity and StatisticsActivity&#10;   - They should match&#10;&#10;3. **Thread Race Condition**&#10;   - Add `Thread.sleep(1000)` before loading stats&#10;   - If this fixes it, there's a timing issue&#10;&#10;4. **Database Corruption**&#10;   - Uninstall and reinstall app&#10;   - Test with fresh installation&#10;&#10;---&#10;&#10;##  Quick Test Script&#10;&#10;1. Clear app data&#10;2. Register: test@test.com / test123&#10;3. Play Now&#10;4. **Win 1 game** → Toast: &quot;Stats updated: Win (+10 pts)&quot;&#10;5. Menu → Quit&#10;6. Statistics → Should show: Games=1, Wins=1, Rate=100%, Score=10&#10;&#10;**If this works**: System is functioning correctly!&#10;**If this fails**: Check Logcat for errors&#10;&#10;---&#10;&#10;##  Contact Support&#10;&#10;If none of the above works, provide:&#10;1. Logcat output (filtered by &quot;GameStats&quot;)&#10;2. Database Inspector screenshot&#10;3. Statistics screen screenshot&#10;4. Steps you followed&#10;5. Android version and device model&#10;&#10;---&#10;&#10;## ✅ Summary&#10;&#10;The fixes applied should resolve the issue. The most common cause is:&#10;1. **Not actually winning games** (losing or drawing instead)&#10;2. **Playing as guest** (stats not saved)&#10;3. **Statistics screen not refreshing** (now fixed with onResume)&#10;&#10;**Test by winning a game and checking the toast notification and Logcat!**&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/GAME_STATISTICS_IMPLEMENTATION.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/GAME_STATISTICS_IMPLEMENTATION.md" />
              <option name="updatedContent" value="# Game Statistics Implementation - Complete Guide&#10;&#10;## ✅ Implementation Complete!&#10;&#10;The Tic Tac Toe game now **fully tracks and stores all game statistics** in SQLite database for each user.&#10;&#10;---&#10;&#10;##  What Statistics Are Tracked?&#10;&#10;### For Each User:&#10;1. **Total Games Played** - Every completed game (win/loss/draw)&#10;2. **Total Games Won** - Only wins count&#10;3. **Win Rate** - Calculated as (Wins / Games Played) × 100%&#10;4. **Total Score** - Cumulative points earned&#10;5. **Last Login Time** - When user last accessed the app&#10;&#10;### Scoring System:&#10;- **Win**: +10 points&#10;- **Draw**: +5 points&#10;- **Loss**: 0 points&#10;&#10;---&#10;&#10;##  How Statistics Are Updated&#10;&#10;### 1. During Gameplay&#10;Every time a game round ends, the system:&#10;- Increments `gamesPlayed` counter&#10;- Increments `gamesWon` counter (only if player wins)&#10;- Adds points to `totalScore` based on result&#10;- Runs all database operations on **background thread** (no UI blocking)&#10;- Shows toast notification confirming stats update&#10;&#10;### 2. Real-Time Feedback&#10;```&#10;&quot;Stats updated: Win (+10 pts)&quot;&#10;&quot;Stats updated: Draw (+5 pts)&quot;&#10;&quot;Stats updated: Loss (+0 pts)&quot;&#10;```&#10;&#10;### 3. When Exiting Game&#10;Shows comprehensive statistics summary:&#10;```&#10;Your Overall Statistics&#10;Total Games: 25&#10;Total Wins: 18&#10;Win Rate: 72.0%&#10;Total Score: 205&#10;&#10;Great playing, [Username]!&#10;```&#10;&#10;---&#10;&#10;##  Database Schema&#10;&#10;### User Table Structure:&#10;```sql&#10;CREATE TABLE users (&#10;    id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;    username TEXT NOT NULL,&#10;    email TEXT UNIQUE NOT NULL,&#10;    password TEXT NOT NULL,&#10;    memberSince TEXT,&#10;    gamesPlayed INTEGER DEFAULT 0,&#10;    gamesWon INTEGER DEFAULT 0,&#10;    totalScore INTEGER DEFAULT 0,&#10;    createdAt LONG,&#10;    lastLoginAt LONG&#10;);&#10;```&#10;&#10;---&#10;&#10;##  Key Implementation Features&#10;&#10;### 1. **Thread Safety**&#10;- All database operations run on background threads&#10;- UI updates happen on main thread via `runOnUiThread()`&#10;- No ANR (Application Not Responding) errors&#10;&#10;### 2. **Guest User Handling**&#10;- Stats only tracked for logged-in users&#10;- Guest users can play but stats aren't saved&#10;- Check: `if (userId != -1)` before saving&#10;&#10;### 3. **Session Summary**&#10;When user clicks &quot;Quit&quot;:&#10;- Shows current session stats (wins this session)&#10;- Then shows overall lifetime stats from database&#10;- Provides encouragement message&#10;&#10;### 4. **Error Handling**&#10;```java&#10;try {&#10;    // Update stats&#10;} catch (Exception e) {&#10;    Toast.makeText(this, &quot;Failed to update statistics&quot;, Toast.LENGTH_SHORT).show();&#10;}&#10;```&#10;&#10;---&#10;&#10;##  Code Implementation Details&#10;&#10;### Main Methods Added/Updated:&#10;&#10;#### 1. `updateGameStatistics(Boolean player1Won)`&#10;```java&#10;- Runs on background thread&#10;- Updates gamesPlayed (always)&#10;- Updates gamesWon (only if win)&#10;- Adds score based on result&#10;- Shows toast notification&#10;```&#10;&#10;#### 2. `showFinalStatsSummary()`&#10;```java&#10;- Fetches user data from database&#10;- Calculates win rate&#10;- Shows dialog with comprehensive stats&#10;- Called when user exits game&#10;```&#10;&#10;#### 3. `showQuitConfirmation()`&#10;```java&#10;- Shows session summary first&#10;- Then shows final stats before closing&#10;- Different behavior for logged-in vs guest users&#10;```&#10;&#10;---&#10;&#10;##  How to Verify Statistics Are Working&#10;&#10;### Test Steps:&#10;1. **Login** to the app with a user account&#10;2. Click **&quot;Play Now&quot;** to start a game&#10;3. **Play and complete** a game (win, lose, or draw)&#10;4. **Look for toast notification**: &quot;Stats updated: Win (+10 pts)&quot;&#10;5. **Play multiple rounds** to accumulate stats&#10;6. Click **Menu → Quit**&#10;7. **Verify** the statistics dialog shows correct numbers&#10;8. Go to **Profile/Statistics** screen&#10;9. **Confirm** the numbers match&#10;&#10;### Expected Results:&#10;- ✅ Games Played increases by 1 after each game&#10;- ✅ Games Won increases only when you win&#10;- ✅ Total Score increases by 10/5/0 for win/draw/loss&#10;- ✅ Win Rate calculates correctly&#10;- ✅ Stats persist across app restarts&#10;&#10;---&#10;&#10;##  User Flow Example&#10;&#10;### Scenario: User plays 3 games&#10;&#10;**Initial Stats:**&#10;- Games Played: 0&#10;- Games Won: 0&#10;- Total Score: 0&#10;&#10;**Game 1 - Win:**&#10;- Games Played: 1&#10;- Games Won: 1&#10;- Total Score: 10&#10;- Toast: &quot;Stats updated: Win (+10 pts)&quot;&#10;&#10;**Game 2 - Loss:**&#10;- Games Played: 2&#10;- Games Won: 1&#10;- Total Score: 10&#10;- Toast: &quot;Stats updated: Loss (+0 pts)&quot;&#10;&#10;**Game 3 - Draw:**&#10;- Games Played: 3&#10;- Games Won: 1&#10;- Total Score: 15&#10;- Toast: &quot;Stats updated: Draw (+5 pts)&quot;&#10;&#10;**Exit Summary:**&#10;```&#10;Your Overall Statistics&#10;Total Games: 3&#10;Total Wins: 1&#10;Win Rate: 33.3%&#10;Total Score: 15&#10;```&#10;&#10;---&#10;&#10;##  Database Access Pattern&#10;&#10;### Thread-Safe Pattern Used:&#10;```java&#10;new Thread(() -&gt; {&#10;    // Database operations (background thread)&#10;    userDao.incrementGamesPlayed(userId);&#10;    userDao.incrementGamesWon(userId);&#10;    userDao.addScore(userId, score);&#10;    &#10;    // UI updates (main thread)&#10;    runOnUiThread(() -&gt; {&#10;        Toast.makeText(...).show();&#10;    });&#10;}).start();&#10;```&#10;&#10;---&#10;&#10;##  Integration Points&#10;&#10;### Files Modified:&#10;1. **GameActivity.java**&#10;   - Added `updateGameStatistics()` method&#10;   - Added `showFinalStatsSummary()` method&#10;   - Updated `showGameEndDialog()` to call stats update&#10;   - Updated `showQuitConfirmation()` to show summary&#10;&#10;### Existing Infrastructure Used:&#10;1. **UserDao.java** - Database operations&#10;   - `incrementGamesPlayed(userId)`&#10;   - `incrementGamesWon(userId)`&#10;   - `addScore(userId, score)`&#10;   - `getUserById(userId)`&#10;&#10;2. **UserSession.java** - Session management&#10;   - `getUserId()` - Get current user&#10;   - `isLoggedIn()` - Check login status&#10;&#10;3. **User.java** - Data model&#10;   - `getGamesPlayed()`&#10;   - `getGamesWon()`&#10;   - `getTotalScore()`&#10;&#10;---&#10;&#10;##  Benefits&#10;&#10;✅ **Persistent Statistics** - Survive app restarts&#10;✅ **Real-time Tracking** - Immediate feedback&#10;✅ **User Engagement** - Players can see progress&#10;✅ **Performance** - Background threads prevent lag&#10;✅ **Accuracy** - Every game recorded correctly&#10;✅ **User-Specific** - Each user has own stats&#10;✅ **Guest-Friendly** - Works for guests (doesn't save)&#10;✅ **Error Resistant** - Graceful error handling&#10;&#10;---&#10;&#10;##  Next Steps (Optional Enhancements)&#10;&#10;Want to add more features? Consider:&#10;&#10;1. **Game History** - Track date/time of each game&#10;2. **Streaks** - Longest winning streak&#10;3. **Achievements** - Unlock badges for milestones&#10;4. **Leaderboard** - Compare with other users&#10;5. **Daily Stats** - Games played today&#10;6. **Average Game Duration** - Track time per game&#10;7. **Opponent Analysis** - Stats vs AI vs Players&#10;&#10;---&#10;&#10;## ✅ Summary&#10;&#10;**The game statistics system is now fully functional!**&#10;&#10;- Every game is tracked ✓&#10;- Stats are saved to SQLite ✓&#10;- Users can see their progress ✓&#10;- Thread-safe implementation ✓&#10;- Proper error handling ✓&#10;- Works for both logged-in and guest users ✓&#10;&#10;**Test it out by playing a few games and checking your stats!** &#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/GameActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/GameActivity.java" />
              <option name="originalContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.OnBackPressedCallback;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.content.ContextCompat;&#10;&#10;import com.example.tabletussle.database.AppDatabase;&#10;import com.example.tabletussle.database.GameStatsManager;&#10;import com.example.tabletussle.database.User;&#10;import com.example.tabletussle.database.UserDao;&#10;import com.example.tabletussle.database.UserSession;&#10;import com.google.android.material.button.MaterialButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Random;&#10;&#10;public class GameActivity extends AppCompatActivity {&#10;&#10;    private TextView tvPlayer1Name, tvPlayer2Name;&#10;    private TextView tvPlayer1Score, tvPlayer2Score;&#10;    private TextView tvCurrentTurn;&#10;    private ImageButton btnMenu, btnInfo;&#10;&#10;    // Game board cells&#10;    private MaterialButton[][] cells = new MaterialButton[3][3];&#10;&#10;    // Game state&#10;    private String[][] board = new String[3][3]; // &quot;X&quot;, &quot;O&quot;, or null&#10;    private static final String PLAYER_X = &quot;X&quot;; // Human player&#10;    private static final String PLAYER_O = &quot;O&quot;; // AI player&#10;    private String currentPlayer = PLAYER_X;&#10;    private boolean gameActive = true;&#10;    private int movesCount = 0;&#10;&#10;    private UserSession userSession;&#10;    private AppDatabase database;&#10;    private UserDao userDao;&#10;    private GameStatsManager statsManager;&#10;&#10;    private String gameMode; // &quot;single&quot;, &quot;quick&quot;, &quot;room&quot;&#10;    private String roomCode;&#10;    private int player1Score = 0;&#10;    private int player2Score = 0;&#10;&#10;    private Handler handler = new Handler(Looper.getMainLooper());&#10;    private Random random = new Random();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_game);&#10;&#10;        // Initialize database and session&#10;        database = AppDatabase.getInstance(this);&#10;        userDao = database.userDao();&#10;        userSession = new UserSession(this);&#10;        statsManager = new GameStatsManager(this);&#10;&#10;        // Get game mode from intent&#10;        Intent intent = getIntent();&#10;        gameMode = intent.getStringExtra(&quot;GAME_MODE&quot;);&#10;        if (gameMode == null) {&#10;            gameMode = &quot;single&quot;; // Default to single player&#10;        }&#10;        roomCode = intent.getStringExtra(&quot;ROOM_CODE&quot;);&#10;&#10;        initializeViews();&#10;        initializeBoard();&#10;        loadPlayerInfo();&#10;        setupClickListeners();&#10;        setupBoardClickListeners();&#10;&#10;        // Handle back button press&#10;        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {&#10;            @Override&#10;            public void handleOnBackPressed() {&#10;                showQuitConfirmation();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvPlayer1Name = findViewById(R.id.tvPlayer1Name);&#10;        tvPlayer2Name = findViewById(R.id.tvPlayer2Name);&#10;        tvPlayer1Score = findViewById(R.id.tvPlayer1Score);&#10;        tvPlayer2Score = findViewById(R.id.tvPlayer2Score);&#10;        tvCurrentTurn = findViewById(R.id.tvCurrentTurn);&#10;        btnMenu = findViewById(R.id.btnMenu);&#10;        btnInfo = findViewById(R.id.btnInfo);&#10;&#10;        // Initialize cell buttons&#10;        cells[0][0] = findViewById(R.id.cell_0_0);&#10;        cells[0][1] = findViewById(R.id.cell_0_1);&#10;        cells[0][2] = findViewById(R.id.cell_0_2);&#10;        cells[1][0] = findViewById(R.id.cell_1_0);&#10;        cells[1][1] = findViewById(R.id.cell_1_1);&#10;        cells[1][2] = findViewById(R.id.cell_1_2);&#10;        cells[2][0] = findViewById(R.id.cell_2_0);&#10;        cells[2][1] = findViewById(R.id.cell_2_1);&#10;        cells[2][2] = findViewById(R.id.cell_2_2);&#10;    }&#10;&#10;    private void initializeBoard() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                board[i][j] = null;&#10;                cells[i][j].setText(&quot;&quot;);&#10;                cells[i][j].setEnabled(true);&#10;            }&#10;        }&#10;        currentPlayer = PLAYER_X;&#10;        gameActive = true;&#10;        movesCount = 0;&#10;    }&#10;&#10;    private void setupBoardClickListeners() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                final int row = i;&#10;                final int col = j;&#10;                cells[i][j].setOnClickListener(v -&gt; onCellClicked(row, col));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onCellClicked(int row, int col) {&#10;        if (!gameActive || board[row][col] != null || currentPlayer != PLAYER_X) {&#10;            return; // Invalid move&#10;        }&#10;&#10;        makeMove(row, col, PLAYER_X);&#10;&#10;        if (gameActive &amp;&amp; currentPlayer == PLAYER_O &amp;&amp; gameMode.equals(&quot;single&quot;)) {&#10;            // AI's turn - delay for better UX&#10;            disableBoardInteraction();&#10;            handler.postDelayed(() -&gt; {&#10;                makeAIMove();&#10;                enableBoardInteraction();&#10;            }, 500 + random.nextInt(500)); // Random delay 500-1000ms&#10;        }&#10;    }&#10;&#10;    private void makeMove(int row, int col, String player) {&#10;        board[row][col] = player;&#10;        cells[row][col].setText(player);&#10;&#10;        // Style the cell based on player&#10;        if (player.equals(PLAYER_X)) {&#10;            cells[row][col].setTextColor(ContextCompat.getColor(this, R.color.primary));&#10;        } else {&#10;            cells[row][col].setTextColor(ContextCompat.getColor(this, R.color.secondary));&#10;        }&#10;&#10;        cells[row][col].setEnabled(false);&#10;        movesCount++;&#10;&#10;        // Check for win or draw&#10;        if (checkWinner(player)) {&#10;            gameActive = false;&#10;            onGameEnd(player);&#10;        } else if (movesCount == 9) {&#10;            gameActive = false;&#10;            onGameEnd(null); // Draw&#10;        } else {&#10;            // Switch player&#10;            currentPlayer = currentPlayer.equals(PLAYER_X) ? PLAYER_O : PLAYER_X;&#10;            updateTurnDisplay();&#10;        }&#10;    }&#10;&#10;    private void makeAIMove() {&#10;        if (!gameActive) return;&#10;&#10;        // Use minimax algorithm for intelligent AI&#10;        int[] bestMove = findBestMove();&#10;&#10;        if (bestMove != null) {&#10;            makeMove(bestMove[0], bestMove[1], PLAYER_O);&#10;        }&#10;    }&#10;&#10;    // Minimax algorithm for AI&#10;    private int[] findBestMove() {&#10;        int bestScore = Integer.MIN_VALUE;&#10;        int[] bestMove = null;&#10;&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    board[i][j] = PLAYER_O;&#10;                    int score = minimax(0, false);&#10;                    board[i][j] = null;&#10;&#10;                    if (score &gt; bestScore) {&#10;                        bestScore = score;&#10;                        bestMove = new int[]{i, j};&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        return bestMove;&#10;    }&#10;&#10;    private int minimax(int depth, boolean isMaximizing) {&#10;        // Check terminal states&#10;        if (checkWinner(PLAYER_O)) return 10 - depth;&#10;        if (checkWinner(PLAYER_X)) return depth - 10;&#10;        if (isBoardFull()) return 0;&#10;&#10;        if (isMaximizing) {&#10;            int bestScore = Integer.MIN_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_O;&#10;                        int score = minimax(depth + 1, false);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.max(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        } else {&#10;            int bestScore = Integer.MAX_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_X;&#10;                        int score = minimax(depth + 1, true);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.min(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        }&#10;    }&#10;&#10;    private boolean checkWinner(String player) {&#10;        // Check rows&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            if (board[i][0] != null &amp;&amp; board[i][0].equals(player) &amp;&amp;&#10;                board[i][1] != null &amp;&amp; board[i][1].equals(player) &amp;&amp;&#10;                board[i][2] != null &amp;&amp; board[i][2].equals(player)) {&#10;                highlightWinningCells(new int[][]{{i,0}, {i,1}, {i,2}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check columns&#10;        for (int j = 0; j &lt; 3; j++) {&#10;            if (board[0][j] != null &amp;&amp; board[0][j].equals(player) &amp;&amp;&#10;                board[1][j] != null &amp;&amp; board[1][j].equals(player) &amp;&amp;&#10;                board[2][j] != null &amp;&amp; board[2][j].equals(player)) {&#10;                highlightWinningCells(new int[][]{{0,j}, {1,j}, {2,j}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check diagonals&#10;        if (board[0][0] != null &amp;&amp; board[0][0].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][2] != null &amp;&amp; board[2][2].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,0}, {1,1}, {2,2}});&#10;            return true;&#10;        }&#10;&#10;        if (board[0][2] != null &amp;&amp; board[0][2].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][0] != null &amp;&amp; board[2][0].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,2}, {1,1}, {2,0}});&#10;            return true;&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private void highlightWinningCells(int[][] winningCells) {&#10;        int highlightColor = ContextCompat.getColor(this, R.color.accent);&#10;        for (int[] cell : winningCells) {&#10;            cells[cell[0]][cell[1]].setBackgroundTintList(&#10;                android.content.res.ColorStateList.valueOf(highlightColor)&#10;            );&#10;        }&#10;    }&#10;&#10;    private boolean isBoardFull() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void disableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setClickable(false);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void enableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    cells[i][j].setClickable(true);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onGameEnd(String winner) {&#10;        disableBoardInteraction();&#10;&#10;        if (winner != null) {&#10;            if (winner.equals(PLAYER_X)) {&#10;                player1Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(true), 800);&#10;            } else {&#10;                player2Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(false), 800);&#10;            }&#10;        } else {&#10;            // Draw&#10;            handler.postDelayed(() -&gt; showGameEndDialog(null), 800);&#10;        }&#10;    }&#10;&#10;    private void showGameEndDialog(Boolean player1Won) {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1 &amp;&amp; player1Won != null) {&#10;            // Update user stats&#10;            int finalScore = player1Won ? player1Score : player2Score;&#10;            statsManager.recordGameResult(player1Won, finalScore);&#10;        }&#10;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;&#10;        if (player1Won == null) {&#10;            builder.setTitle(&quot;It's a Draw!&quot;);&#10;            builder.setMessage(&quot;Good game!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else if (player1Won) {&#10;            builder.setTitle(&quot;You Win! &quot;);&#10;            builder.setMessage(&quot;Congratulations!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else {&#10;            builder.setTitle(&quot;AI Wins!&quot;);&#10;            builder.setMessage(&quot;Better luck next time!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        }&#10;&#10;        builder.setPositiveButton(&quot;Play Again&quot;, (dialog, which) -&gt; resetRound());&#10;        builder.setNegativeButton(&quot;Exit&quot;, (dialog, which) -&gt; finish());&#10;        builder.setCancelable(false);&#10;        builder.show();&#10;    }&#10;&#10;    private void resetRound() {&#10;        // Clear the board for next round&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        ContextCompat.getColor(this, R.color.cardBackground)&#10;                    )&#10;                );&#10;            }&#10;        }&#10;        initializeBoard();&#10;        enableBoardInteraction();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void loadPlayerInfo() {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1) {&#10;            User user = userDao.getUserById(userId);&#10;            if (user != null) {&#10;                tvPlayer1Name.setText(user.getUsername());&#10;            }&#10;        } else {&#10;            tvPlayer1Name.setText(&quot;Guest&quot;);&#10;        }&#10;&#10;        // Set opponent based on game mode&#10;        switch (gameMode) {&#10;            case &quot;single&quot;:&#10;                tvPlayer2Name.setText(&quot;AI Opponent&quot;);&#10;                break;&#10;            case &quot;quick&quot;:&#10;            case &quot;room&quot;:&#10;                tvPlayer2Name.setText(&quot;Waiting for opponent...&quot;);&#10;                break;&#10;            default:&#10;                tvPlayer2Name.setText(&quot;Player 2&quot;);&#10;                break;&#10;        }&#10;&#10;        updateScoreDisplay();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnMenu.setOnClickListener(v -&gt; showMenuDialog());&#10;&#10;        btnInfo.setOnClickListener(v -&gt; {&#10;            // Show game info or rules&#10;            Intent intent = new Intent(GameActivity.this, HowToPlayActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void showMenuDialog() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Game Menu&quot;);&#10;&#10;        String[] options = {&quot;Resume&quot;, &quot;New Game&quot;, &quot;Settings&quot;, &quot;Quit&quot;};&#10;&#10;        builder.setItems(options, (dialog, which) -&gt; {&#10;            switch (which) {&#10;                case 0: // Resume&#10;                    dialog.dismiss();&#10;                    break;&#10;                case 1: // New Game&#10;                    showNewGameConfirmation();&#10;                    break;&#10;                case 2: // Settings&#10;                    Intent intent = new Intent(GameActivity.this, SettingsActivity.class);&#10;                    startActivity(intent);&#10;                    break;&#10;                case 3: // Quit&#10;                    showQuitConfirmation();&#10;                    break;&#10;            }&#10;        });&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private void showNewGameConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;New Game&quot;);&#10;        builder.setMessage(&quot;Are you sure you want to start a new game? Current scores will be reset.&quot;);&#10;&#10;        builder.setPositiveButton(&quot;New Game&quot;, (dialog, which) -&gt; {&#10;            player1Score = 0;&#10;            player2Score = 0;&#10;            updateScoreDisplay();&#10;            resetRound();&#10;            Toast.makeText(this, &quot;New game started&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    private void showQuitConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Quit Game&quot;);&#10;        builder.setMessage(&quot;Are you sure you want to quit?&quot;);&#10;&#10;        builder.setPositiveButton(&quot;Quit&quot;, (dialog, which) -&gt; finish());&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    private void updateScoreDisplay() {&#10;        tvPlayer1Score.setText(String.valueOf(player1Score));&#10;        tvPlayer2Score.setText(String.valueOf(player2Score));&#10;    }&#10;&#10;    private void updateTurnDisplay() {&#10;        if (currentPlayer.equals(PLAYER_X)) {&#10;            tvCurrentTurn.setText(tvPlayer1Name.getText() + &quot;'s Turn&quot;);&#10;        } else {&#10;            tvCurrentTurn.setText(tvPlayer2Name.getText() + &quot;'s Turn&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.OnBackPressedCallback;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.content.ContextCompat;&#10;&#10;import com.example.tabletussle.database.AppDatabase;&#10;import com.example.tabletussle.database.GameStatsManager;&#10;import com.example.tabletussle.database.User;&#10;import com.example.tabletussle.database.UserDao;&#10;import com.example.tabletussle.database.UserSession;&#10;import com.google.android.material.button.MaterialButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Random;&#10;&#10;public class GameActivity extends AppCompatActivity {&#10;&#10;    private TextView tvPlayer1Name, tvPlayer2Name;&#10;    private TextView tvPlayer1Score, tvPlayer2Score;&#10;    private TextView tvCurrentTurn;&#10;    private ImageButton btnMenu, btnInfo;&#10;&#10;    // Game board cells&#10;    private MaterialButton[][] cells = new MaterialButton[3][3];&#10;&#10;    // Game state&#10;    private String[][] board = new String[3][3]; // &quot;X&quot;, &quot;O&quot;, or null&#10;    private static final String PLAYER_X = &quot;X&quot;; // Human player&#10;    private static final String PLAYER_O = &quot;O&quot;; // AI player&#10;    private String currentPlayer = PLAYER_X;&#10;    private boolean gameActive = true;&#10;    private int movesCount = 0;&#10;&#10;    private UserSession userSession;&#10;    private AppDatabase database;&#10;    private UserDao userDao;&#10;    private GameStatsManager statsManager;&#10;&#10;    private String gameMode; // &quot;single&quot;, &quot;quick&quot;, &quot;room&quot;&#10;    private String roomCode;&#10;    private int player1Score = 0;&#10;    private int player2Score = 0;&#10;&#10;    private Handler handler = new Handler(Looper.getMainLooper());&#10;    private Random random = new Random();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_game);&#10;&#10;        // Initialize database and session&#10;        database = AppDatabase.getInstance(this);&#10;        userDao = database.userDao();&#10;        userSession = new UserSession(this);&#10;        statsManager = new GameStatsManager(this);&#10;&#10;        // Get game mode from intent&#10;        Intent intent = getIntent();&#10;        gameMode = intent.getStringExtra(&quot;GAME_MODE&quot;);&#10;        if (gameMode == null) {&#10;            gameMode = &quot;single&quot;; // Default to single player&#10;        }&#10;        roomCode = intent.getStringExtra(&quot;ROOM_CODE&quot;);&#10;&#10;        initializeViews();&#10;        initializeBoard();&#10;        loadPlayerInfo();&#10;        setupClickListeners();&#10;        setupBoardClickListeners();&#10;&#10;        // Handle back button press&#10;        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {&#10;            @Override&#10;            public void handleOnBackPressed() {&#10;                showQuitConfirmation();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvPlayer1Name = findViewById(R.id.tvPlayer1Name);&#10;        tvPlayer2Name = findViewById(R.id.tvPlayer2Name);&#10;        tvPlayer1Score = findViewById(R.id.tvPlayer1Score);&#10;        tvPlayer2Score = findViewById(R.id.tvPlayer2Score);&#10;        tvCurrentTurn = findViewById(R.id.tvCurrentTurn);&#10;        btnMenu = findViewById(R.id.btnMenu);&#10;        btnInfo = findViewById(R.id.btnInfo);&#10;&#10;        // Initialize cell buttons&#10;        cells[0][0] = findViewById(R.id.cell_0_0);&#10;        cells[0][1] = findViewById(R.id.cell_0_1);&#10;        cells[0][2] = findViewById(R.id.cell_0_2);&#10;        cells[1][0] = findViewById(R.id.cell_1_0);&#10;        cells[1][1] = findViewById(R.id.cell_1_1);&#10;        cells[1][2] = findViewById(R.id.cell_1_2);&#10;        cells[2][0] = findViewById(R.id.cell_2_0);&#10;        cells[2][1] = findViewById(R.id.cell_2_1);&#10;        cells[2][2] = findViewById(R.id.cell_2_2);&#10;    }&#10;&#10;    private void initializeBoard() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                board[i][j] = null;&#10;                cells[i][j].setText(&quot;&quot;);&#10;                cells[i][j].setEnabled(true);&#10;            }&#10;        }&#10;        currentPlayer = PLAYER_X;&#10;        gameActive = true;&#10;        movesCount = 0;&#10;    }&#10;&#10;    private void setupBoardClickListeners() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                final int row = i;&#10;                final int col = j;&#10;                cells[i][j].setOnClickListener(v -&gt; onCellClicked(row, col));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onCellClicked(int row, int col) {&#10;        if (!gameActive || board[row][col] != null || currentPlayer != PLAYER_X) {&#10;            return; // Invalid move&#10;        }&#10;&#10;        makeMove(row, col, PLAYER_X);&#10;&#10;        if (gameActive &amp;&amp; currentPlayer == PLAYER_O &amp;&amp; gameMode.equals(&quot;single&quot;)) {&#10;            // AI's turn - delay for better UX&#10;            disableBoardInteraction();&#10;            handler.postDelayed(() -&gt; {&#10;                makeAIMove();&#10;                enableBoardInteraction();&#10;            }, 500 + random.nextInt(500)); // Random delay 500-1000ms&#10;        }&#10;    }&#10;&#10;    private void makeMove(int row, int col, String player) {&#10;        board[row][col] = player;&#10;        cells[row][col].setText(player);&#10;&#10;        // Style the cell based on player&#10;        if (player.equals(PLAYER_X)) {&#10;            cells[row][col].setTextColor(ContextCompat.getColor(this, R.color.primary));&#10;        } else {&#10;            cells[row][col].setTextColor(ContextCompat.getColor(this, R.color.secondary));&#10;        }&#10;&#10;        cells[row][col].setEnabled(false);&#10;        movesCount++;&#10;&#10;        // Check for win or draw&#10;        if (checkWinner(player)) {&#10;            gameActive = false;&#10;            onGameEnd(player);&#10;        } else if (movesCount == 9) {&#10;            gameActive = false;&#10;            onGameEnd(null); // Draw&#10;        } else {&#10;            // Switch player&#10;            currentPlayer = currentPlayer.equals(PLAYER_X) ? PLAYER_O : PLAYER_X;&#10;            updateTurnDisplay();&#10;        }&#10;    }&#10;&#10;    private void makeAIMove() {&#10;        if (!gameActive) return;&#10;&#10;        // Use minimax algorithm for intelligent AI&#10;        int[] bestMove = findBestMove();&#10;&#10;        if (bestMove != null) {&#10;            makeMove(bestMove[0], bestMove[1], PLAYER_O);&#10;        }&#10;    }&#10;&#10;    // Minimax algorithm for AI&#10;    private int[] findBestMove() {&#10;        int bestScore = Integer.MIN_VALUE;&#10;        int[] bestMove = null;&#10;&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    board[i][j] = PLAYER_O;&#10;                    int score = minimax(0, false);&#10;                    board[i][j] = null;&#10;&#10;                    if (score &gt; bestScore) {&#10;                        bestScore = score;&#10;                        bestMove = new int[]{i, j};&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        return bestMove;&#10;    }&#10;&#10;    private int minimax(int depth, boolean isMaximizing) {&#10;        // Check terminal states&#10;        if (checkWinner(PLAYER_O)) return 10 - depth;&#10;        if (checkWinner(PLAYER_X)) return depth - 10;&#10;        if (isBoardFull()) return 0;&#10;&#10;        if (isMaximizing) {&#10;            int bestScore = Integer.MIN_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_O;&#10;                        int score = minimax(depth + 1, false);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.max(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        } else {&#10;            int bestScore = Integer.MAX_VALUE;&#10;            for (int i = 0; i &lt; 3; i++) {&#10;                for (int j = 0; j &lt; 3; j++) {&#10;                    if (board[i][j] == null) {&#10;                        board[i][j] = PLAYER_X;&#10;                        int score = minimax(depth + 1, true);&#10;                        board[i][j] = null;&#10;                        bestScore = Math.min(score, bestScore);&#10;                    }&#10;                }&#10;            }&#10;            return bestScore;&#10;        }&#10;    }&#10;&#10;    private boolean checkWinner(String player) {&#10;        // Check rows&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            if (board[i][0] != null &amp;&amp; board[i][0].equals(player) &amp;&amp;&#10;                board[i][1] != null &amp;&amp; board[i][1].equals(player) &amp;&amp;&#10;                board[i][2] != null &amp;&amp; board[i][2].equals(player)) {&#10;                highlightWinningCells(new int[][]{{i,0}, {i,1}, {i,2}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check columns&#10;        for (int j = 0; j &lt; 3; j++) {&#10;            if (board[0][j] != null &amp;&amp; board[0][j].equals(player) &amp;&amp;&#10;                board[1][j] != null &amp;&amp; board[1][j].equals(player) &amp;&amp;&#10;                board[2][j] != null &amp;&amp; board[2][j].equals(player)) {&#10;                highlightWinningCells(new int[][]{{0,j}, {1,j}, {2,j}});&#10;                return true;&#10;            }&#10;        }&#10;&#10;        // Check diagonals&#10;        if (board[0][0] != null &amp;&amp; board[0][0].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][2] != null &amp;&amp; board[2][2].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,0}, {1,1}, {2,2}});&#10;            return true;&#10;        }&#10;&#10;        if (board[0][2] != null &amp;&amp; board[0][2].equals(player) &amp;&amp;&#10;            board[1][1] != null &amp;&amp; board[1][1].equals(player) &amp;&amp;&#10;            board[2][0] != null &amp;&amp; board[2][0].equals(player)) {&#10;            highlightWinningCells(new int[][]{{0,2}, {1,1}, {2,0}});&#10;            return true;&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    private void highlightWinningCells(int[][] winningCells) {&#10;        int highlightColor = ContextCompat.getColor(this, R.color.accent);&#10;        for (int[] cell : winningCells) {&#10;            cells[cell[0]][cell[1]].setBackgroundTintList(&#10;                android.content.res.ColorStateList.valueOf(highlightColor)&#10;            );&#10;        }&#10;    }&#10;&#10;    private boolean isBoardFull() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    return false;&#10;                }&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private void disableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setClickable(false);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void enableBoardInteraction() {&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                if (board[i][j] == null) {&#10;                    cells[i][j].setClickable(true);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onGameEnd(String winner) {&#10;        disableBoardInteraction();&#10;&#10;        if (winner != null) {&#10;            if (winner.equals(PLAYER_X)) {&#10;                player1Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(true), 800);&#10;            } else {&#10;                player2Score++;&#10;                updateScoreDisplay();&#10;                handler.postDelayed(() -&gt; showGameEndDialog(false), 800);&#10;            }&#10;        } else {&#10;            // Draw&#10;            handler.postDelayed(() -&gt; showGameEndDialog(null), 800);&#10;        }&#10;    }&#10;&#10;    private void showGameEndDialog(Boolean player1Won) {&#10;        // Update statistics in background thread&#10;        updateGameStatistics(player1Won);&#10;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;&#10;        if (player1Won == null) {&#10;            builder.setTitle(&quot;It's a Draw!&quot;);&#10;            builder.setMessage(&quot;Good game!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else if (player1Won) {&#10;            builder.setTitle(&quot;You Win! &quot;);&#10;            builder.setMessage(&quot;Congratulations!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        } else {&#10;            builder.setTitle(&quot;AI Wins!&quot;);&#10;            builder.setMessage(&quot;Better luck next time!\n\nFinal Score:\n&quot; +&#10;                    tvPlayer1Name.getText() + &quot;: &quot; + player1Score + &quot;\n&quot; +&#10;                    tvPlayer2Name.getText() + &quot;: &quot; + player2Score);&#10;        }&#10;&#10;        builder.setPositiveButton(&quot;Play Again&quot;, (dialog, which) -&gt; resetRound());&#10;        builder.setNegativeButton(&quot;Exit&quot;, (dialog, which) -&gt; finish());&#10;        builder.setCancelable(false);&#10;        builder.show();&#10;    }&#10;&#10;    /**&#10;     * Update game statistics in the database&#10;     * Runs on background thread to avoid blocking UI&#10;     */&#10;    private void updateGameStatistics(Boolean player1Won) {&#10;        int userId = userSession.getUserId();&#10;&#10;        // Only track stats for logged-in users&#10;        if (userId == -1) {&#10;            return;&#10;        }&#10;&#10;        // Run database operations on background thread&#10;        new Thread(() -&gt; {&#10;            try {&#10;                // Always increment games played for any game completion&#10;                userDao.incrementGamesPlayed(userId);&#10;                android.util.Log.d(&quot;GameStats&quot;, &quot;Incremented games played for user &quot; + userId);&#10;&#10;                // Increment games won only if player won&#10;                if (player1Won != null &amp;&amp; player1Won) {&#10;                    userDao.incrementGamesWon(userId);&#10;                    android.util.Log.d(&quot;GameStats&quot;, &quot;Incremented games won for user &quot; + userId);&#10;                }&#10;&#10;                // Add score points:&#10;                // Win = 10 points, Draw = 5 points, Loss = 0 points&#10;                final int scoreToAdd;&#10;                if (player1Won == null) {&#10;                    scoreToAdd = 5; // Draw&#10;                } else if (player1Won) {&#10;                    scoreToAdd = 10; // Win&#10;                } else {&#10;                    scoreToAdd = 0; // Loss&#10;                }&#10;&#10;                if (scoreToAdd &gt; 0) {&#10;                    userDao.addScore(userId, scoreToAdd);&#10;                    android.util.Log.d(&quot;GameStats&quot;, &quot;Added &quot; + scoreToAdd + &quot; points for user &quot; + userId);&#10;                }&#10;&#10;                // Verify the update by reading back the user data&#10;                User updatedUser = userDao.getUserById(userId);&#10;                if (updatedUser != null) {&#10;                    android.util.Log.d(&quot;GameStats&quot;, &quot;Updated stats - Games: &quot; + updatedUser.getGamesPlayed() + &#10;                                     &quot;, Wins: &quot; + updatedUser.getGamesWon() + &#10;                                     &quot;, Score: &quot; + updatedUser.getTotalScore());&#10;                }&#10;&#10;                // Log the result for debugging&#10;                final String result = player1Won == null ? &quot;Draw&quot; : (player1Won ? &quot;Win&quot; : &quot;Loss&quot;);&#10;                runOnUiThread(() -&gt; {&#10;                    Toast.makeText(this, &quot;Stats updated: &quot; + result + &quot; (+&quot; + scoreToAdd + &quot; pts)&quot;,&#10;                                   Toast.LENGTH_SHORT).show();&#10;                });&#10;&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                runOnUiThread(() -&gt;&#10;                    Toast.makeText(this, &quot;Failed to update statistics&quot;, Toast.LENGTH_SHORT).show()&#10;                );&#10;            }&#10;        }).start();&#10;    }&#10;&#10;    private void resetRound() {&#10;        // Clear the board for next round&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            for (int j = 0; j &lt; 3; j++) {&#10;                cells[i][j].setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        ContextCompat.getColor(this, R.color.cardBackground)&#10;                    )&#10;                );&#10;            }&#10;        }&#10;        initializeBoard();&#10;        enableBoardInteraction();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void loadPlayerInfo() {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1) {&#10;            User user = userDao.getUserById(userId);&#10;            if (user != null) {&#10;                tvPlayer1Name.setText(user.getUsername());&#10;            }&#10;        } else {&#10;            tvPlayer1Name.setText(&quot;Guest&quot;);&#10;        }&#10;&#10;        // Set opponent based on game mode&#10;        switch (gameMode) {&#10;            case &quot;single&quot;:&#10;                tvPlayer2Name.setText(&quot;AI Opponent&quot;);&#10;                break;&#10;            case &quot;quick&quot;:&#10;            case &quot;room&quot;:&#10;                tvPlayer2Name.setText(&quot;Waiting for opponent...&quot;);&#10;                break;&#10;            default:&#10;                tvPlayer2Name.setText(&quot;Player 2&quot;);&#10;                break;&#10;        }&#10;&#10;        updateScoreDisplay();&#10;        updateTurnDisplay();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnMenu.setOnClickListener(v -&gt; showMenuDialog());&#10;&#10;        btnInfo.setOnClickListener(v -&gt; {&#10;            // Show game info or rules&#10;            Intent intent = new Intent(GameActivity.this, HowToPlayActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void showMenuDialog() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Game Menu&quot;);&#10;&#10;        String[] options = {&quot;Resume&quot;, &quot;New Game&quot;, &quot;Settings&quot;, &quot;Quit&quot;};&#10;&#10;        builder.setItems(options, (dialog, which) -&gt; {&#10;            switch (which) {&#10;                case 0: // Resume&#10;                    dialog.dismiss();&#10;                    break;&#10;                case 1: // New Game&#10;                    showNewGameConfirmation();&#10;                    break;&#10;                case 2: // Settings&#10;                    Intent intent = new Intent(GameActivity.this, SettingsActivity.class);&#10;                    startActivity(intent);&#10;                    break;&#10;                case 3: // Quit&#10;                    showQuitConfirmation();&#10;                    break;&#10;            }&#10;        });&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private void showNewGameConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;New Game&quot;);&#10;        builder.setMessage(&quot;Are you sure you want to start a new game? Current scores will be reset.&quot;);&#10;&#10;        builder.setPositiveButton(&quot;New Game&quot;, (dialog, which) -&gt; {&#10;            player1Score = 0;&#10;            player2Score = 0;&#10;            updateScoreDisplay();&#10;            resetRound();&#10;            Toast.makeText(this, &quot;New game started&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    private void showQuitConfirmation() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Quit Game&quot;);&#10;&#10;        // Show session summary if user is logged in&#10;        int userId = userSession.getUserId();&#10;        String message = &quot;Are you sure you want to quit?&quot;;&#10;&#10;        if (userId != -1) {&#10;            message = &quot;Session Summary:\n&quot; +&#10;                     &quot;Games Played: &quot; + (player1Score + player2Score) + &quot;\n&quot; +&#10;                     &quot;Your Wins: &quot; + player1Score + &quot;\n&quot; +&#10;                     &quot;AI Wins: &quot; + player2Score + &quot;\n\n&quot; +&#10;                     &quot;Are you sure you want to quit?&quot;;&#10;        }&#10;&#10;        builder.setMessage(message);&#10;&#10;        builder.setPositiveButton(&quot;Quit&quot;, (dialog, which) -&gt; {&#10;            // Show final statistics summary before exiting&#10;            showFinalStatsSummary();&#10;        });&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    /**&#10;     * Show final statistics summary when user exits the game&#10;     */&#10;    private void showFinalStatsSummary() {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1) {&#10;            new Thread(() -&gt; {&#10;                try {&#10;                    User user = userDao.getUserById(userId);&#10;&#10;                    runOnUiThread(() -&gt; {&#10;                        if (user != null) {&#10;                            int totalGames = user.getGamesPlayed();&#10;                            int totalWins = user.getGamesWon();&#10;                            int totalScore = user.getTotalScore();&#10;                            double winRate = totalGames &gt; 0 ? (totalWins * 100.0 / totalGames) : 0;&#10;&#10;                            AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;                            builder.setTitle(&quot;Your Overall Statistics&quot;);&#10;                            builder.setMessage(&#10;                                &quot;Total Games: &quot; + totalGames + &quot;\n&quot; +&#10;                                &quot;Total Wins: &quot; + totalWins + &quot;\n&quot; +&#10;                                &quot;Win Rate: &quot; + String.format(&quot;%.1f&quot;, winRate) + &quot;%\n&quot; +&#10;                                &quot;Total Score: &quot; + totalScore + &quot;\n\n&quot; +&#10;                                &quot;Great playing, &quot; + user.getUsername() + &quot;!&quot;&#10;                            );&#10;                            builder.setPositiveButton(&quot;OK&quot;, (dialog, which) -&gt; finish());&#10;                            builder.setCancelable(false);&#10;                            builder.show();&#10;                        } else {&#10;                            finish();&#10;                        }&#10;                    });&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                    runOnUiThread(this::finish);&#10;                }&#10;            }).start();&#10;        } else {&#10;            finish();&#10;        }&#10;    }&#10;&#10;    private void updateScoreDisplay() {&#10;        tvPlayer1Score.setText(String.valueOf(player1Score));&#10;        tvPlayer2Score.setText(String.valueOf(player2Score));&#10;    }&#10;&#10;    private void updateTurnDisplay() {&#10;        if (currentPlayer.equals(PLAYER_X)) {&#10;            tvCurrentTurn.setText(tvPlayer1Name.getText() + &quot;'s Turn&quot;);&#10;        } else {&#10;            tvCurrentTurn.setText(tvPlayer2Name.getText() + &quot;'s Turn&quot;);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/StatisticsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tabletussle/StatisticsActivity.java" />
              <option name="originalContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.tabletussle.database.AppDatabase;&#10;import com.example.tabletussle.database.User;&#10;import com.example.tabletussle.database.UserDao;&#10;import com.example.tabletussle.database.UserSession;&#10;import com.google.android.material.card.MaterialCardView;&#10;&#10;public class StatisticsActivity extends AppCompatActivity {&#10;&#10;    private TextView tvUserName, tvGamesPlayed, tvGamesWon, tvWinRate, tvTotalScore;&#10;    private MaterialCardView cardAchievements, cardFriends, cardHistory;&#10;    private UserSession userSession;&#10;    private AppDatabase database;&#10;    private UserDao userDao;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_statistics);&#10;&#10;        // Initialize database and session&#10;        database = AppDatabase.getInstance(this);&#10;        userDao = database.userDao();&#10;        userSession = new UserSession(this);&#10;&#10;        initializeViews();&#10;        loadUserData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvUserName = findViewById(R.id.tvUserName);&#10;        tvGamesPlayed = findViewById(R.id.tvGamesPlayed);&#10;        tvGamesWon = findViewById(R.id.tvGamesWon);&#10;        tvWinRate = findViewById(R.id.tvWinRate);&#10;        tvTotalScore = findViewById(R.id.tvTotalScore);&#10;        cardAchievements = findViewById(R.id.cardAchievements);&#10;        cardFriends = findViewById(R.id.cardFriends);&#10;        cardHistory = findViewById(R.id.cardHistory);&#10;    }&#10;&#10;    private void loadUserData() {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1) {&#10;            User user = userDao.getUserById(userId);&#10;&#10;            if (user != null) {&#10;                tvUserName.setText(user.getUsername());&#10;                tvGamesPlayed.setText(String.valueOf(user.getGamesPlayed()));&#10;                tvGamesWon.setText(String.valueOf(user.getGamesWon()));&#10;                tvTotalScore.setText(String.valueOf(user.getTotalScore()));&#10;&#10;                // Calculate win rate&#10;                if (user.getGamesPlayed() &gt; 0) {&#10;                    double winRate = (user.getGamesWon() * 100.0) / user.getGamesPlayed();&#10;                    tvWinRate.setText(String.format(&quot;%.1f%%&quot;, winRate));&#10;                } else {&#10;                    tvWinRate.setText(&quot;0%&quot;);&#10;                }&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Guest user or no data&#10;        tvUserName.setText(&quot;Guest Player&quot;);&#10;        tvGamesPlayed.setText(&quot;0&quot;);&#10;        tvGamesWon.setText(&quot;0&quot;);&#10;        tvWinRate.setText(&quot;0%&quot;);&#10;        tvTotalScore.setText(&quot;0&quot;);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        cardAchievements.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(StatisticsActivity.this, AchievementsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardFriends.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(StatisticsActivity.this, FriendsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardHistory.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(StatisticsActivity.this, GameHistoryActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        findViewById(R.id.btnBack).setOnClickListener(v -&gt; finish());&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.tabletussle;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.tabletussle.database.AppDatabase;&#10;import com.example.tabletussle.database.User;&#10;import com.example.tabletussle.database.UserDao;&#10;import com.example.tabletussle.database.UserSession;&#10;import com.google.android.material.card.MaterialCardView;&#10;&#10;public class StatisticsActivity extends AppCompatActivity {&#10;&#10;    private TextView tvUserName, tvGamesPlayed, tvGamesWon, tvWinRate, tvTotalScore;&#10;    private MaterialCardView cardAchievements, cardFriends, cardHistory;&#10;    private UserSession userSession;&#10;    private AppDatabase database;&#10;    private UserDao userDao;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_statistics);&#10;&#10;        // Initialize database and session&#10;        database = AppDatabase.getInstance(this);&#10;        userDao = database.userDao();&#10;        userSession = new UserSession(this);&#10;&#10;        initializeViews();&#10;        loadUserData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        tvUserName = findViewById(R.id.tvUserName);&#10;        tvGamesPlayed = findViewById(R.id.tvGamesPlayed);&#10;        tvGamesWon = findViewById(R.id.tvGamesWon);&#10;        tvWinRate = findViewById(R.id.tvWinRate);&#10;        tvTotalScore = findViewById(R.id.tvTotalScore);&#10;        cardAchievements = findViewById(R.id.cardAchievements);&#10;        cardFriends = findViewById(R.id.cardFriends);&#10;        cardHistory = findViewById(R.id.cardHistory);&#10;    }&#10;&#10;    private void loadUserData() {&#10;        int userId = userSession.getUserId();&#10;&#10;        if (userId != -1) {&#10;            // Load user data on background thread&#10;            new Thread(() -&gt; {&#10;                User user = userDao.getUserById(userId);&#10;&#10;                runOnUiThread(() -&gt; {&#10;                    if (user != null) {&#10;                        tvUserName.setText(user.getUsername());&#10;                        tvGamesPlayed.setText(String.valueOf(user.getGamesPlayed()));&#10;                        tvGamesWon.setText(String.valueOf(user.getGamesWon()));&#10;                        tvTotalScore.setText(String.valueOf(user.getTotalScore()));&#10;&#10;                        // Calculate win rate&#10;                        if (user.getGamesPlayed() &gt; 0) {&#10;                            double winRate = (user.getGamesWon() * 100.0) / user.getGamesPlayed();&#10;                            tvWinRate.setText(String.format(&quot;%.1f%%&quot;, winRate));&#10;                        } else {&#10;                            tvWinRate.setText(&quot;0%&quot;);&#10;                        }&#10;                    } else {&#10;                        setGuestUserData();&#10;                    }&#10;                });&#10;            }).start();&#10;        } else {&#10;            setGuestUserData();&#10;        }&#10;    }&#10;&#10;    private void setGuestUserData() {&#10;        // Guest user or no data&#10;        tvUserName.setText(&quot;Guest Player&quot;);&#10;        tvGamesPlayed.setText(&quot;0&quot;);&#10;        tvGamesWon.setText(&quot;0&quot;);&#10;        tvWinRate.setText(&quot;0%&quot;);&#10;        tvTotalScore.setText(&quot;0&quot;);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        cardAchievements.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(StatisticsActivity.this, AchievementsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardFriends.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(StatisticsActivity.this, FriendsActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardHistory.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(StatisticsActivity.this, GameHistoryActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        findViewById(R.id.btnBack).setOnClickListener(v -&gt; finish());&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>